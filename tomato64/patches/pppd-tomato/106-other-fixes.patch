--- pppd/chat/chat.c
+++ pppd/chat/chat.c
@@ -202,8 +202,9 @@
 
 char *abort_string[MAX_ABORTS], *fail_reason = (char *)0,
 	fail_buffer[50];
-int n_aborts = 0, abort_next = 0, timeout_next = 0, echo_next = 0;
+int n_aborts = 0, abort_next = 0, timeout_next = 0, echo_next = 0, hex_next = 0;
 int clear_abort_next = 0;
+int hex = -1;
 
 char *report_string[MAX_REPORTS] ;
 char  report_buffer[4096] ;
@@ -598,7 +599,7 @@
     saved_tty_parameters = t;
     have_tty_parameters  = 1;
 
-    t.c_iflag     |= IGNBRK | ISTRIP | IGNPAR;
+    t.c_iflag     |= IGNBRK | IGNPAR;
     t.c_oflag      = 0;
     t.c_lflag      = 0;
     t.c_cc[VERASE] =
@@ -950,6 +951,11 @@
 	return;
     }
 
+    if (strcmp(s, "HEX") == 0) {
+	++hex_next;
+	return;
+    }
+
 /*
  * Fetch the expect and reply string.
  */
@@ -1160,6 +1166,12 @@
 	free(s);
 	return 0;
     }
+    
+    if (hex_next) {
+	hex_next = 0;
+	hex = (strcmp(s, "ON") == 0);
+	return;
+    }
 
     /*
      * The syntax @filename means read the string to send from the
@@ -1219,7 +1231,7 @@
 
     switch (status) {
     case 1:
-	return ((int)c & 0x7F);
+	return ((int)c & 0xFF);
 
     default:
 	msgf("warning: read() on stdin returned %d", status);
@@ -1419,7 +1431,9 @@
 	}
 
 	if (Verbose) {
-	   if (c == '\n')
+	   if ((hex == 2) || (hex == 0))
+	       fprintf(stderr, "%.2X", c);
+	   else if (c == '\n')
 	       fputc( '\n', stderr );
 	   else if (c != '\r')
 	       fprintf( stderr, "%s", character(c) );
@@ -1469,6 +1483,10 @@
 	    alarm(0);
 	    alarmed = 0;
 	    free(s1);
+	    if (hex == 1)
+	      hex = 2;
+	    if (hex == 0)
+	      hex = -1;
 	    return (1);
 	}
 
--- pppd/pppd/auth.c
+++ pppd/pppd/auth.c
@@ -652,6 +652,9 @@
  */
 void start_link(int unit)
 {
+    /* we are called via link_terminated, must be ignored */
+    if (in_phase(PHASE_DISCONNECT))
+	return;
     ppp_set_status(EXIT_CONNECT_FAILED);
     new_phase(PHASE_SERIALCONN);
 
--- pppd/pppd/plugins/pppol2tp/pppol2tp.c
+++ pppd/pppd/plugins/pppol2tp/pppol2tp.c
@@ -127,14 +127,8 @@
 
 static int setdevname_pppol2tp(char **argv)
 {
-	union {
-		char buffer[128];
-		struct sockaddr pppol2tp;
-	} s;
-	socklen_t len = sizeof(s);
-	char **a;
-	int tmp;
-	socklen_t tmp_len = sizeof(tmp);
+	struct sockaddr_pppol2tp sax;
+	socklen_t len = sizeof(sax);
 
 	if (device_got_set)
 		return 0;
@@ -142,21 +136,21 @@
 	if (!ppp_int_option(*argv, &pppol2tp_fd))
 		return 0;
 
-	if(getsockname(pppol2tp_fd, (struct sockaddr *)&s, &len) < 0) {
+	if(getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len) < 0) {
 		fatal("Given FD for PPPoL2TP socket invalid (%s)",
 		      strerror(errno));
 	}
-	if(s.pppol2tp.sa_family != AF_PPPOX) {
-		fatal("Socket of not a PPPoX socket");
+	if((sax.sa_family != AF_PPPOX) || (sax.sa_protocol != PX_PROTO_OL2TP)) {
+		fatal("Socket is not a PPPoL2TP socket");
 	}
 
 	/* Do a test getsockopt() to ensure that the kernel has the necessary
 	 * feature available.
-	 */
+	 * driver returns -ENOTCONN until session established!
 	if (getsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_DEBUG,
 		       &tmp, &tmp_len) < 0) {
 		fatal("PPPoL2TP kernel driver not installed");
-	}
+	} */
 
 	pppol2tp_fd_str = strdup(*argv);
 	if (pppol2tp_fd_str == NULL)
@@ -189,10 +183,16 @@
 
 static int connect_pppol2tp(void)
 {
+	struct sockaddr_pppol2tp sax;
+	socklen_t len = sizeof(sax);
+
 	if(pppol2tp_fd == -1) {
 		fatal("No PPPoL2TP FD specified");
 	}
 
+	getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len);
+	sprintf(ppp_devnam, "l2tp (%s)", inet_ntoa(sax.pppol2tp.addr.sin_addr));
+
 	return pppol2tp_fd;
 }
 
