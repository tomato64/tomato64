From 78b519be874030053be91d0a1cf18c346975fcb9 Mon Sep 17 00:00:00 2001
From: lancethepants <lancethepants@gmail.com>
Date: Sat, 15 Feb 2025 13:53:05 -0700
Subject: [PATCH] dnsmasq: Tomato-helper patch fixes

---
 src/config.h  | 11 +++++++
 src/dnsmasq.c | 58 +++++++++++++++++++++++++++++++++
 src/dnsmasq.h |  6 ++++
 src/lease.c   | 88 +++++++++++++++++++++++++++++++++++++++++++++++++--
 4 files changed, 161 insertions(+), 2 deletions(-)

diff --git a/src/config.h b/src/config.h
index e722e98..0f2068c 100644
--- a/src/config.h
+++ b/src/config.h
@@ -82,6 +82,10 @@ HAVE_BROKEN_RTC
    NOTE: when enabling or disabling this, be sure to delete any old
    leases file, otherwise dnsmasq may get very confused.
 
+HAVE_LEASEFILE_EXPIRE
+
+HAVE_TOMATO
+
 HAVE_TFTP
    define this to get dnsmasq's built-in TFTP server.
 
@@ -358,6 +362,10 @@ HAVE_SOCKADDR_SA_LEN
 #undef HAVE_LOOP
 #endif
 
+#ifdef HAVE_TOMATO
+#define HAVE_LEASEFILE_EXPIRE
+#endif
+
 #ifdef NO_DUMPFILE
 #undef HAVE_DUMPFILE
 #endif
@@ -434,6 +442,9 @@ static char *compile_opts =
 "no-"
 #endif
 "nftset "
+#ifdef HAVE_TOMATO
+"Tomato-helper "
+#endif
 #ifndef HAVE_AUTH
 "no-"
 #endif
diff --git a/src/dnsmasq.c b/src/dnsmasq.c
index 30fb419..f34e3f8 100644
--- a/src/dnsmasq.c
+++ b/src/dnsmasq.c
@@ -13,6 +13,44 @@
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
+/* Jon Zarate AFAIK wrote the original Tomato specific code, primarily to
+   support extra info in the GUI. Following is a vague clue as to how it
+   hangs together.
+
+   device list status is handled by www/devlist.c - this sends a SIGUSR2
+   to dnsmasq which causes the 'tomato_helper' function to execute in
+   addition to the normal dnsmasq SIGUSR2 code (Switch logfile, but since
+   Tomato not using that it doesn't matter) devlist.c waits up to 5 secs
+   for file '/var/tmp/dhcp/leases.!' to disappear before continuing
+   (Must be a better way to do this IPC stuff)
+
+   tomato_helper(lease.c) does a couple of things:
+
+   It looks for /var/tmp/dhcp/delete and deletes any known leases by IP
+   address found therein.  It deletes /var/tmp/dhcp/delete when done.
+   This implements the 'delete lease' from GUI functionality.
+
+   It dumps the current dhcp leases into /var/tmp/dhcp/lease.! (tmp file)
+   subtracting the current time from the lease expiry time, thus producing
+   a 'lease remaining' time for the GUI.
+   The temp file is renamed to /var/tmp/dhcp/leases thus signalling devlist.c
+   that it may proceed.  Finally when devlist.c is finished
+   /var/tmp/dhcp/leases is removed.
+
+   dnsmasq.c also intercepts SIGHUP so that it may flush the lease file.
+   This is so lease expiry times survive a process restart since dnsmasq
+   reads the lease file at start-up.
+
+   Finally(?) lease_update_file (lease.c) writes out the remaining lease
+   duration for each dhcp lease rather than lease expiry time (with RTC) or
+   lease length (no RTC) for dnsmasq's internal lease database. 
+
+   dhcp lease file is /var/lib/misc/dnsmasq.leases
+
+   Above description K Darbyshire-Bryant 04/12/13
+*/
+
+
 
 /* Declare static char *compiler_opts  in config.h */
 #define DNSMASQ_COMPILE_OPTS
@@ -1575,8 +1613,22 @@ static void async_event(int pipe, time_t now)
 	/* Note: this may leave TCP-handling processes with the old file still open.
 	   Since any such process will die in CHILD_LIFETIME or probably much sooner,
 	   we leave them logging to the old file. */
+
 	if (daemon->log_file != NULL)
 	  log_reopen(daemon->log_file);
+
+#ifdef HAVE_TOMATO
+	tomato_helper(now); /* possibly delete & write out leases for Tomato */
+#endif /* HAVE_TOMATO */
+/* following is Asus tweak. Interestingly Asus read the dnsmasq leases db
+   directly.  They signal dnsmasq to update via SIGUSR2 and wait 1 second
+   assuming the file will be complete by the time they come to parse it.
+   Race conditions anyone? What if dnsmasq happens to be updating the
+   file anyway? */
+#if defined(HAVE_DHCP) && defined(HAVE_LEASEFILE_EXPIRE) && !defined(HAVE_TOMATO)
+	if (daemon->dhcp || daemon->dhcp6)
+	  flush_lease_file(now);
+#endif
 	break;
 
       case EVENT_NEWADDR:
@@ -1620,6 +1672,12 @@ static void async_event(int pipe, time_t now)
 	    close(daemon->helperfd);
 	  }
 #endif
+
+/* Originally TOMATO tweak */
+#if defined(HAVE_DHCP) && defined(HAVE_LEASEFILE_EXPIRE)
+	if (daemon->dhcp || daemon->dhcp6)
+	  flush_lease_file(now);
+#endif
 	
 	if (daemon->lease_stream)
 	  fclose(daemon->lease_stream);
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index e455c3f..ba95db3 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -1638,6 +1638,12 @@ int make_icmp_sock(void);
 int icmp_ping(struct in_addr addr);
 int delay_dhcp(time_t start, int sec, int fd, uint32_t addr, unsigned short id);
 #endif
+#ifdef HAVE_TOMATO
+void tomato_helper(time_t now);
+#endif
+#ifdef HAVE_LEASEFILE_EXPIRE
+void flush_lease_file(time_t now);
+#endif
 void queue_event(int event);
 void send_alarm(time_t event, time_t now);
 void send_event(int fd, int event, int data, char *msg);
diff --git a/src/lease.c b/src/lease.c
index 55e8443..a5b9441 100644
--- a/src/lease.c
+++ b/src/lease.c
@@ -113,12 +113,15 @@ static int read_leases(time_t now, FILE *leasestream)
 
 	ei = atol(daemon->dhcp_buff3);
 
-#ifdef HAVE_BROKEN_RTC
+/* Some ASUS & TOMATO tweaks */
+#if defined(HAVE_BROKEN_RTC) || defined(HAVE_LEASEFILE_EXPIRE)
 	if (ei != 0)
 	  lease->expires = (time_t)ei + now;
 	else
 	  lease->expires = (time_t)0;
+#ifdef HAVE_BROKEN_RTC
 	lease->length = ei;
+#endif
 #else
 	/* strictly time_t is opaque, but this hack should work on all sane systems,
 	   even when sizeof(time_t) == 8 */
@@ -264,7 +267,16 @@ void lease_update_file(time_t now)
 	    continue;
 #endif
 
+/* ASUS and TOMATO tweaks to output remaining leasetime */
+#ifdef HAVE_LEASEFILE_EXPIRE
+	  ourprintf(&err, "%u ",
 #ifdef HAVE_BROKEN_RTC
+		    (lease->length == 0) ? 0 :
+#else
+		    (lease->expires == 0) ? 0 :
+#endif
+		    (unsigned int)difftime(lease->expires, now));
+#elif defined(HAVE_BROKEN_RTC)
 	  ourprintf(&err, "%u ", lease->length);
 #else
 	  ourprintf(&err, "%lu ", (unsigned long)lease->expires);
@@ -308,12 +320,21 @@ void lease_update_file(time_t now)
 	      if (!(lease->flags & (LEASE_TA | LEASE_NA)))
 		continue;
 
+/* ASUS and TOMATO tweaks to output remaining leasetime */
+#ifdef HAVE_LEASEFILE_EXPIRE
+	      ourprintf(&err, "%u ",
 #ifdef HAVE_BROKEN_RTC
+			(lease->length == 0) ? 0 :
+#else
+			(lease->expires == 0) ? 0 :
+#endif
+			(unsigned int)difftime(lease->expires, now));
+#elif defined(HAVE_BROKEN_RTC)
 	      ourprintf(&err, "%u ", lease->length);
 #else
 	      ourprintf(&err, "%lu ", (unsigned long)lease->expires);
 #endif
-    
+
 	      inet_ntop(AF_INET6, &lease->addr6, daemon->addrbuff, ADDRSTRLEN);
 	 
 	      ourprintf(&err, "%s%u %s ", (lease->flags & LEASE_TA) ? "T" : "",
@@ -1221,4 +1242,67 @@ void lease_add_extradata(struct dhcp_lease *lease, unsigned char *data, unsigned
 }
 #endif
 
+
+#ifdef HAVE_TOMATO
+void tomato_helper(time_t now)
+{
+  FILE *f;
+  struct in_addr ia;
+  char buf[64];
+  struct dhcp_lease *lease;
+
+  /* if delete exists... */
+  if ((f = fopen("/var/tmp/dhcp/delete", "r")) != NULL) {
+    while (fgets(buf, sizeof(buf), f)) {
+	buf[strcspn(buf, "\n")] = 0;
+	inet_aton(buf, &ia);
+	if (lease = lease_find_by_addr(ia)) {
+	  lease_prune(lease, 0);
+	  lease_update_file(now);
+	  lease_update_dns(0);
+	}
+    }
+    fclose(f);
+    unlink("/var/tmp/dhcp/delete");
+  }
+
+  /* dump the leases file */
+  if ((f = fopen("/var/tmp/dhcp/leases.!", "w")) != NULL) {
+    for (lease = leases; lease; lease = lease->next) {
+	if (lease->hwaddr_type == ARPHRD_ETHER) {
+#ifdef HAVE_DHCP6 /* only dump dhcpv6 if we have it */
+	  if (lease->flags & (LEASE_TA | LEASE_NA))
+	    inet_ntop(AF_INET6, &lease->addr6, buf, ADDRSTRLEN);
+	  else
+#endif
+	    inet_ntop(AF_INET, &lease->addr, buf, ADDRSTRLEN);
+
+	  fprintf(f, "%lu %02X:%02X:%02X:%02X:%02X:%02X %s %s\n",
+	              lease->expires - now,
+	              lease->hwaddr[0], lease->hwaddr[1], lease->hwaddr[2], lease->hwaddr[3], lease->hwaddr[4], lease->hwaddr[5],
+	              buf,
+	              ((lease->hostname) && (strlen(lease->hostname) > 0)) ? lease->hostname : "*");
+	}
+    }
+    fclose(f);
+    rename("/var/tmp/dhcp/leases.!", "/var/tmp/dhcp/leases");
+  }
+}
+#endif /* HAVE_TOMATO */
+
+#ifdef HAVE_LEASEFILE_EXPIRE
+void flush_lease_file(time_t now)
+{
+  static time_t flush_time = (time_t)0;
+
+  if (difftime(flush_time, now) < 0)
+    file_dirty = 1;
+
+  lease_prune(NULL, now);
+  lease_update_file(now);
+  if (file_dirty == 0)
+    flush_time = now;
+}
+#endif /* HAVE_LEASEFILE_EXPIRE */
+
 #endif /* HAVE_DHCP */
-- 
2.39.5

