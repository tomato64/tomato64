diff -daurN busybox/networking/ntpd.c busybox_/networking/ntpd.c
--- busybox/networking/ntpd.c	2024-12-01 17:00:00.000000000 +0100
+++ busybox_/networking/ntpd.c	2024-12-01 17:04:31.000000000 +0100
@@ -553,21 +553,20 @@
 	return G.cur_time;
 }
 
+static void
+d_to_tv(struct timeval *tv, double d)
+{
+	tv->tv_sec = (long)d;
+	tv->tv_usec = (d - tv->tv_sec) * 1000000;
+}
+
 static NOINLINE double
 lfp_to_d(l_fixedpt_t lfp)
 {
 	double ret;
 	lfp.int_partl = ntohl(lfp.int_partl);
 	lfp.fractionl = ntohl(lfp.fractionl);
-	ret = (double)lfp.int_partl + ((double)lfp.fractionl / (1ULL << 32));
-	/*
-	 * Shift timestamps before 1970 to the second NTP era (2036-2106):
-	 * int_partl value of OFFSET_1900_1970 (2208988800) is interpreted as
-	 * the start of year 1970 and it is the minimal representable time,
-	 * all values form the sequence 2208988800..0xffffffff,0..2208988799.
-	 */
-	if (lfp.int_partl < OFFSET_1900_1970)
-		ret += (double)(1ULL << 32); /* because int_partl is 32-bit wide */
+	ret = (double)lfp.int_partl + ((double)lfp.fractionl / UINT_MAX);
 	return ret;
 }
 static NOINLINE double
@@ -576,7 +575,7 @@
 	double ret;
 	sfp.int_parts = ntohs(sfp.int_parts);
 	sfp.fractions = ntohs(sfp.fractions);
-	ret = (double)sfp.int_parts + ((double)sfp.fractions / (1 << 16));
+	ret = (double)sfp.int_parts + ((double)sfp.fractions / USHRT_MAX);
 	return ret;
 }
 #if ENABLE_FEATURE_NTPD_SERVER
@@ -585,8 +584,8 @@
 {
 	uint32_t intl;
 	uint32_t frac;
-	intl = (uint32_t)(time_t)d;
-	frac = (uint32_t)((d - (time_t)d) * 0xffffffff);
+	intl = (uint32_t)d;
+	frac = (uint32_t)((d - intl) * UINT_MAX);
 	lfp->int_partl = htonl(intl);
 	lfp->fractionl = htonl(frac);
 }
@@ -596,7 +595,7 @@
 	uint16_t ints;
 	uint16_t frac;
 	ints = (uint16_t)d;
-	frac = (uint16_t)((d - ints) * 0xffff);
+	frac = (uint16_t)((d - ints) * USHRT_MAX);
 	sfp->int_parts = htons(ints);
 	sfp->fractions = htons(frac);
 }
@@ -1056,17 +1055,8 @@
 	time_t tval;
 
 	xgettimeofday(&tvc);
-	/* This code adds floating point value on the order of 1.0
-	 * to a value of ~4 billion (as of years 203x).
-	 * With 52-bit mantissa, "only" 20 bits of offset's precision
-	 * are used (~1 microsecond), the rest is lost.
-	 * Some 200 billion years later, when tvc.tv_sec would have
-	 * 63 significant bits, the precision loss would be catastrophic,
-	 * a more complex code would be needed.
-	 */
 	dtime = tvc.tv_sec + (1.0e-6 * tvc.tv_usec) + offset;
-	tvn.tv_sec = (time_t)dtime;
-	tvn.tv_usec = (dtime - tvn.tv_sec) * 1000000;
+	d_to_tv(&tvn, dtime);
 	xsettimeofday(&tvn);
 
 	VERB2 {
@@ -1654,7 +1644,7 @@
 		if (adjtimex(&tmx) < 0)
 			bb_simple_perror_msg_and_die("adjtimex");
 		bb_error_msg("p adjtimex freq:%ld offset:%+ld status:0x%x tc:%ld",
-				(long)tmx.freq, (long)tmx.offset, tmx.status, (long)tmx.constant);
+				tmx.freq, tmx.offset, tmx.status, tmx.constant);
 	}
 
 	memset(&tmx, 0, sizeof(tmx));
@@ -1769,7 +1759,7 @@
 	 * Not sure why. Perhaps it is normal.
 	 */
 	VERB4 bb_error_msg("adjtimex:%d freq:%ld offset:%+ld status:0x%x",
-				rc, (long)tmx.freq, (long)tmx.offset, tmx.status);
+				rc, tmx.freq, tmx.offset, tmx.status);
 	G.kernel_freq_drift = tmx.freq / 65536;
 	VERB2 bb_error_msg("update from:%s offset:%+f delay:%f jitter:%f clock drift:%+.3fppm tc:%d",
 			p->p_dotted,
