From bd0eb18544b885b0ad29c2e6647febe91510a78d Mon Sep 17 00:00:00 2001
From: lancethepants <lancethepants@gmail.com>
Date: Fri, 23 Aug 2024 14:24:46 -0600
Subject: [PATCH 3/6] 003

---
 include/net/netfilter/nf_conntrack.h |  5 +++++
 net/netfilter/Kconfig                |  4 ++++
 net/netfilter/nf_conntrack_core.c    | 27 +++++++++++++++++++++++++++
 3 files changed, 36 insertions(+)

diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h
index a735c3ce1..c48323d02 100644
--- a/include/net/netfilter/nf_conntrack.h
+++ b/include/net/netfilter/nf_conntrack.h
@@ -376,6 +376,11 @@ int nf_ct_skb_network_trim(struct sk_buff *skb, int family);
 int nf_ct_handle_fragments(struct net *net, struct sk_buff *skb,
 			   u16 zone, u8 family, u8 *proto, u16 *mru);
 
+#ifdef CONFIG_NF_CONNTRACK_DESTROY_HOOK
+void register_nf_ct_destroy_hook(void (*hook)(struct nf_conn *));
+void unregister_nf_ct_destroy_hook(void);
+#endif
+
 #define NF_CT_STAT_INC(net, count)	  __this_cpu_inc((net)->ct.stat->count)
 #define NF_CT_STAT_INC_ATOMIC(net, count) this_cpu_inc((net)->ct.stat->count)
 #define NF_CT_STAT_ADD_ATOMIC(net, count, v) this_cpu_add((net)->ct.stat->count, (v))
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index 7e933b9b0..29f2f5f6d 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -79,11 +79,15 @@ config NETFILTER_NETLINK_OSF
 	  If this option is enabled, the kernel will include support
 	  for passive OS fingerprint via NFNETLINK.
 
+config NF_CONNTRACK_DESTROY_HOOK
+	bool
+
 config NF_CONNTRACK
 	tristate "Netfilter connection tracking support"
 	default m if NETFILTER_ADVANCED=n
 	select NF_DEFRAG_IPV4
 	select NF_DEFRAG_IPV6 if IPV6 != n
+	select NF_CONNTRACK_DESTROY_HOOK
 	help
 	  Connection tracking keeps a record of what packets have passed
 	  through your machine, in order to figure out how they are related
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 47afb9ffb..623ef8741 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -571,9 +571,30 @@ static void destroy_gre_conntrack(struct nf_conn *ct)
 #endif
 }
 
+#ifdef CONFIG_NF_CONNTRACK_DESTROY_HOOK
+
+static void (*nf_ct_destroy_hook)(struct nf_conn *) __rcu __read_mostly = NULL;
+
+void register_nf_ct_destroy_hook(void (*hook)(struct nf_conn *))
+{
+	rcu_assign_pointer(nf_ct_destroy_hook, hook);
+}
+EXPORT_SYMBOL(register_nf_ct_destroy_hook);
+
+void unregister_nf_ct_destroy_hook(void)
+{
+	rcu_assign_pointer(nf_ct_destroy_hook, NULL);
+}
+
+EXPORT_SYMBOL(unregister_nf_ct_destroy_hook);
+#endif
+
 void nf_ct_destroy(struct nf_conntrack *nfct)
 {
 	struct nf_conn *ct = (struct nf_conn *)nfct;
+#ifdef CONFIG_NF_CONNTRACK_DESTROY_HOOK
+	void (*hook)(struct nf_conn *);
+#endif
 
 	WARN_ON(refcount_read(&nfct->use) != 0);
 
@@ -582,6 +603,12 @@ void nf_ct_destroy(struct nf_conntrack *nfct)
 		return;
 	}
 
+#ifdef CONFIG_NF_CONNTRACK_DESTROY_HOOK
+	hook = rcu_dereference(nf_ct_destroy_hook);
+	if (hook)
+		hook(ct);
+#endif
+
 	if (unlikely(nf_ct_protonum(ct) == IPPROTO_GRE))
 		destroy_gre_conntrack(ct);
 
-- 
2.39.2

