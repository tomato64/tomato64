From 94bf48b9ae921ddf083b408f1e655fa76aca55e2 Mon Sep 17 00:00:00 2001
From: lancethepants <lancethepants@gmail.com>
Date: Fri, 23 Aug 2024 14:23:26 -0600
Subject: [PATCH 1/6] 001

---
 include/linux/netfilter_ipv4/ip_autofw.h      |  35 ++
 include/linux/netfilter_ipv4/ipt_TRIGGER.h    |  25 +
 include/net/netfilter/nf_conntrack.h          |   6 +
 include/net/netfilter/nf_nat.h                |   6 +
 include/net/netfilter/nf_nat_rule.h           |  15 +
 .../linux/netfilter/nf_conntrack_common.h     |   4 +
 include/uapi/linux/netfilter/xt_connmark.h    |   3 +-
 net/ipv4/netfilter/Kconfig                    |   7 +
 net/ipv4/netfilter/Makefile                   |   1 +
 net/ipv4/netfilter/ipt_TRIGGER.c              | 461 ++++++++++++++++++
 net/netfilter/xt_connmark.c                   |   9 +
 11 files changed, 571 insertions(+), 1 deletion(-)
 create mode 100644 include/linux/netfilter_ipv4/ip_autofw.h
 create mode 100644 include/linux/netfilter_ipv4/ipt_TRIGGER.h
 create mode 100644 include/net/netfilter/nf_nat_rule.h
 create mode 100644 net/ipv4/netfilter/ipt_TRIGGER.c

diff --git a/include/linux/netfilter_ipv4/ip_autofw.h b/include/linux/netfilter_ipv4/ip_autofw.h
new file mode 100644
index 000000000..c46c4e675
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ip_autofw.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
+ * 
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+ * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
+ * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
+ * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * $Id: ip_autofw.h,v 1.1 2008-10-02 03:42:40 $
+ */
+
+#ifndef _IP_AUTOFW_H
+#define _IP_AUTOFW_H
+
+#define AUTOFW_MASTER_TIMEOUT 600	/* 600 secs */
+
+struct ip_autofw_info {
+	u_int16_t proto;	/* Related protocol */
+	u_int16_t dport[2];	/* Related destination port range */
+	u_int16_t to[2];	/* Port range to map related destination port range to */
+};
+
+struct ip_autofw_expect {
+	u_int16_t dport[2];	/* Related destination port range */
+	u_int16_t to[2];	/* Port range to map related destination port range to */
+};
+
+#endif /* _IP_AUTOFW_H */
diff --git a/include/linux/netfilter_ipv4/ipt_TRIGGER.h b/include/linux/netfilter_ipv4/ipt_TRIGGER.h
new file mode 100644
index 000000000..aa1bb8bd0
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_TRIGGER.h
@@ -0,0 +1,25 @@
+#ifndef _IPT_TRIGGER_H_target
+#define _IPT_TRIGGER_H_target
+
+#define TRIGGER_TIMEOUT 600	/* 600 secs */
+
+enum ipt_trigger_type
+{
+	IPT_TRIGGER_DNAT = 1,
+	IPT_TRIGGER_IN = 2,
+	IPT_TRIGGER_OUT = 3,
+	IPT_TRIGGER_REFRESH = 4
+};
+
+struct ipt_trigger_ports {
+	u_int16_t mport[2];	/* Related destination port range */
+	u_int16_t rport[2];	/* Port range to map related destination port range to */
+};
+
+struct ipt_trigger_info {
+	enum ipt_trigger_type type;
+	u_int16_t proto;	/* Related protocol */
+	struct ipt_trigger_ports ports;
+};
+
+#endif /*_IPT_TRIGGER_H_target*/
diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h
index 4085765c3..a735c3ce1 100644
--- a/include/net/netfilter/nf_conntrack.h
+++ b/include/net/netfilter/nf_conntrack.h
@@ -72,6 +72,12 @@ struct nf_conntrack_net {
 #include <net/netfilter/ipv4/nf_conntrack_ipv4.h>
 #include <net/netfilter/ipv6/nf_conntrack_ipv6.h>
 
+#ifdef CONFIG_NETFILTER_DEBUG
+#define NF_CT_ASSERT(x)                WARN_ON(!(x))
+#else
+#define NF_CT_ASSERT(x)
+#endif
+
 struct nf_conn {
 	/* Usage count in here is 1 for hash table, 1 per skb,
 	 * plus 1 for any connection(s) we are `master' for
diff --git a/include/net/netfilter/nf_nat.h b/include/net/netfilter/nf_nat.h
index 9877f0645..2690b4886 100644
--- a/include/net/netfilter/nf_nat.h
+++ b/include/net/netfilter/nf_nat.h
@@ -2,6 +2,12 @@
 #ifndef _NF_NAT_H
 #define _NF_NAT_H
 
+#define IP_NAT_RANGE_MAP_IPS 1
+#define IP_NAT_RANGE_PROTO_SPECIFIED 2
+#define IP_NAT_RANGE_PROTO_RANDOM 4
+#define IP_NAT_RANGE_PERSISTENT 8
+#define IP_NAT_RANGE_PROTO_PSID (1 << 7)
+
 #include <linux/list.h>
 #include <linux/netfilter_ipv4.h>
 #include <linux/netfilter/nf_conntrack_pptp.h>
diff --git a/include/net/netfilter/nf_nat_rule.h b/include/net/netfilter/nf_nat_rule.h
new file mode 100644
index 000000000..2890bdc4c
--- /dev/null
+++ b/include/net/netfilter/nf_nat_rule.h
@@ -0,0 +1,15 @@
+#ifndef _NF_NAT_RULE_H
+#define _NF_NAT_RULE_H
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_nat.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+
+extern int nf_nat_rule_init(void) __init;
+extern void nf_nat_rule_cleanup(void);
+extern int nf_nat_rule_find(struct sk_buff *skb,
+			    unsigned int hooknum,
+			    const struct net_device *in,
+			    const struct net_device *out,
+			    struct nf_conn *ct);
+
+#endif /* _NF_NAT_RULE_H */
diff --git a/include/uapi/linux/netfilter/nf_conntrack_common.h b/include/uapi/linux/netfilter/nf_conntrack_common.h
index 26071021e..082551cc6 100644
--- a/include/uapi/linux/netfilter/nf_conntrack_common.h
+++ b/include/uapi/linux/netfilter/nf_conntrack_common.h
@@ -118,6 +118,10 @@ enum ip_conntrack_status {
 	IPS_HW_OFFLOAD_BIT = 15,
 	IPS_HW_OFFLOAD = (1 << IPS_HW_OFFLOAD_BIT),
 
+	/* Trigger */
+	IPS_TRIGGER_BIT = 15,
+	IPS_TRIGGER = (1 << IPS_TRIGGER_BIT),
+
 	/* Be careful here, modifying these bits can make things messy,
 	 * so don't let users modify them directly.
 	 */
diff --git a/include/uapi/linux/netfilter/xt_connmark.h b/include/uapi/linux/netfilter/xt_connmark.h
index 1ef51bca5..66df29d42 100644
--- a/include/uapi/linux/netfilter/xt_connmark.h
+++ b/include/uapi/linux/netfilter/xt_connmark.h
@@ -11,7 +11,8 @@
 enum {
 	XT_CONNMARK_SET = 0,
 	XT_CONNMARK_SAVE,
-	XT_CONNMARK_RESTORE
+	XT_CONNMARK_RESTORE,
+	XT_CONNMARK_SET_RETURN
 };
 
 enum {
diff --git a/net/ipv4/netfilter/Kconfig b/net/ipv4/netfilter/Kconfig
index f71a7e9a7..8f4481640 100644
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -86,6 +86,13 @@ config NF_REJECT_IPV4
 	default m if NETFILTER_ADVANCED=n
 
 if NF_NAT
+
+config IP_NF_TARGET_TRIGGER
+	tristate "TRIGGER target support (port-trigger)"
+	depends on NF_NAT
+	help
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config NF_NAT_SNMP_BASIC
 	tristate "Basic SNMP-ALG support"
 	depends on NF_CONNTRACK_SNMP
diff --git a/net/ipv4/netfilter/Makefile b/net/ipv4/netfilter/Makefile
index 5a26f9de1..5954a75ed 100644
--- a/net/ipv4/netfilter/Makefile
+++ b/net/ipv4/netfilter/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_IP_NF_MATCH_RPFILTER) += ipt_rpfilter.o
 obj-$(CONFIG_IP_NF_TARGET_ECN) += ipt_ECN.o
 obj-$(CONFIG_IP_NF_TARGET_REJECT) += ipt_REJECT.o
 obj-$(CONFIG_IP_NF_TARGET_SYNPROXY) += ipt_SYNPROXY.o
+obj-$(CONFIG_IP_NF_TARGET_TRIGGER) += ipt_TRIGGER.o
 
 # generic ARP tables
 obj-$(CONFIG_IP_NF_ARPTABLES) += arp_tables.o
diff --git a/net/ipv4/netfilter/ipt_TRIGGER.c b/net/ipv4/netfilter/ipt_TRIGGER.c
new file mode 100644
index 000000000..9d30e9d34
--- /dev/null
+++ b/net/ipv4/netfilter/ipt_TRIGGER.c
@@ -0,0 +1,461 @@
+/* Kernel module to match the port-ranges, trigger related port-ranges,
+ * and alters the destination to a local IP address.
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ *
+ * Description:
+ *   This is kernel module for port-triggering.
+ *
+ *   The module follows the Netfilter framework, called extended packet 
+ *   matching modules. 
+ *
+ * History:
+ *
+ * 2008.07: code cleaning by Delta Networks Inc.
+ */
+
+#include <linux/types.h>
+#include <linux/skbuff.h>
+#include <linux/version.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <net/sock.h>
+#include <linux/timer.h>
+#include <linux/module.h>
+#include <linux/netfilter.h>
+#include <linux/netdevice.h>
+#include <linux/if.h>
+#include <linux/inetdevice.h>
+#include <net/protocol.h>
+#include <net/checksum.h>
+
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ip_autofw.h>
+
+#include <net/netfilter/nf_nat.h>
+#include <net/netfilter/nf_nat_helper.h>
+#include <net/netfilter/nf_conntrack_core.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_conntrack_expect.h>
+
+#define CONFIG_NF_NAT_NEEDED 1
+
+#ifdef CONFIG_NF_NAT_NEEDED
+#include <net/netfilter/nf_nat_rule.h>
+#else
+#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#endif
+#include <linux/netfilter_ipv4/ipt_TRIGGER.h>
+#include <uapi/linux/netfilter/nf_nat.h>
+
+/* This rwlock protects the main hash table, protocol/helper/expected
+ * registrations, conntrack timers
+ */
+static DEFINE_RWLOCK(trigger_lock);
+
+#include <linux/list.h>
+
+#if 0
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif
+
+#define LIST_FIND(head, cmpfn, type, args...)		\
+({							\
+	const struct list_head *__i, *__j = NULL;	\
+							\
+	read_lock_bh(&trigger_lock);			\
+	list_for_each(__i, (head))			\
+		if (cmpfn((const type)__i , ## args)) {	\
+			__j = __i;			\
+			break;				\
+		}					\
+	read_unlock_bh(&trigger_lock);			\
+	(type)__j;					\
+})
+
+struct ipt_trigger {
+	struct list_head list;	/* Trigger list */
+	struct timer_list timeout;	/* Timer for list destroying */
+	u_int32_t srcip;	/* Outgoing source address */
+	u_int16_t mproto;	/* Trigger protocol */
+	u_int16_t rproto;	/* Related protocol */
+	struct ipt_trigger_ports ports;	/* Trigger and related ports */
+	u_int8_t reply;		/* Confirm a reply connection */
+	struct net *net;
+};
+
+static LIST_HEAD(trigger_list);
+
+static void trigger_timer_refresh(struct ipt_trigger *trig)
+{
+	DEBUGP("%s: mport=%u-%u\n", __FUNCTION__, trig->ports.mport[0], trig->ports.mport[1]);
+	NF_CT_ASSERT(trig);
+	write_lock_bh(&trigger_lock);
+
+	/* Need del_timer for race avoidance (may already be dying). */
+	if (del_timer(&trig->timeout)) {
+		trig->timeout.expires = jiffies + (TRIGGER_TIMEOUT * HZ);
+		add_timer(&trig->timeout);
+	}
+
+	write_unlock_bh(&trigger_lock);
+}
+
+static void __del_trigger(struct ipt_trigger *trig)
+{
+	DEBUGP("%s: mport=%u-%u\n", __FUNCTION__, trig->ports.mport[0], trig->ports.mport[1]);
+	NF_CT_ASSERT(trig);
+
+	/* delete from 'trigger_list' */
+	list_del(&trig->list);
+	kfree(trig);
+}
+
+static int ip_ct_kill_triggered(struct nf_conn *i, void *ifindex)
+{
+	u_int16_t proto, dport;
+	struct ipt_trigger *trig;
+
+	if (!(i->status & IPS_TRIGGER))
+		return 0;
+
+	trig = ifindex;
+	proto = i->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum;
+	dport = ntohs(i->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.all);
+
+	if (trig->rproto == proto || trig->rproto == 0)
+		return (trig->ports.rport[0] <= dport && trig->ports.rport[1] >= dport);
+	else
+		return 0;
+}
+
+static void trigger_timeout(unsigned long ul_trig)
+{
+	struct ipt_trigger *trig = (void *)ul_trig;
+
+	struct nf_ct_iter_data iter = {
+		.portid		= 0,
+		.report		= 0,
+	};
+
+	DEBUGP("%s: mport=%u-%u\n", __FUNCTION__, trig->ports.mport[0], trig->ports.mport[1]);
+
+	iter.net = &init_net;
+	iter.data = (void *)trig,
+	nf_ct_iterate_cleanup_net(ip_ct_kill_triggered, &iter);
+
+	write_lock_bh(&trigger_lock);
+	__del_trigger(trig);
+	write_unlock_bh(&trigger_lock);
+}
+
+static void trigger_flush(void)
+{
+	struct list_head *cur_item, *tmp_item;
+
+        struct nf_ct_iter_data iter = {
+                .portid         = 0,
+                .report         = 0,
+        };
+
+	DEBUGP("%s\n", __FUNCTION__);
+	write_lock_bh(&trigger_lock);
+	list_for_each_safe(cur_item, tmp_item, &trigger_list) {
+		struct ipt_trigger *trig = (void *)cur_item;
+
+		DEBUGP("%s: list_for_each_safe(): %p.\n", __FUNCTION__, trig);
+		del_timer(&trig->timeout);
+		iter.net = trig->net;
+		iter.data = (void *)trig;
+		nf_ct_iterate_cleanup_net(ip_ct_kill_triggered, &iter);
+		__del_trigger(trig);
+	}
+	write_unlock_bh(&trigger_lock);
+}
+
+/*
+ *	Service-Name	OutBound	InBound
+ * 1.	TMD		UDP:1000	TCP/UDP:2000..2010
+ * 2.	WOKAO		UDP:1000	TCP/UDP:3000..3010
+ * 3.	net2phone-1	UDP:6801	TCP:30000..30000
+ * 4.	net2phone-2	UDP:6801	UDP:30000..30000
+ *
+ * For supporting to use the same outgoing port to trigger different port rules,
+ * it should check the inbound protocol and port range value. If all conditions
+ * are matched, it is a same trigger item, else it needs to create a new one.
+ */
+static inline int trigger_out_matched(const struct ipt_trigger *i,
+				      const u_int16_t proto, const u_int16_t dport, const struct ipt_trigger_info *info)
+{
+	return
+	    i->mproto == proto &&
+	    i->ports.mport[0] <= dport &&
+	    i->ports.mport[1] >= dport &&
+	    i->rproto == info->proto && i->ports.rport[0] == info->ports.rport[0] && i->ports.rport[1] == info->ports.rport[1];
+}
+
+static unsigned int trigger_out(struct sk_buff **pskb, const void *targinfo)
+{
+	const struct ipt_trigger_info *info = targinfo;
+	struct ipt_trigger *trig;
+	struct iphdr *iph = ip_hdr(*pskb);
+	struct tcphdr *tcph = (void *)iph + (iph->ihl << 2);	/* Might be TCP, UDP */
+
+	/* Check if the trigger range has already existed in 'trigger_list'. */
+	trig = LIST_FIND(&trigger_list, trigger_out_matched, struct ipt_trigger *, iph->protocol, ntohs(tcph->dest), info);
+
+	if (trig != NULL) {
+		DEBUGP("Tirgger Out Refresh: %pI4 %u\n", &iph->saddr, ntohs(tcph->dest));
+		/* Yeah, it exists. We need to update(delay) the destroying timer. */
+		trigger_timer_refresh(trig);
+		/* In order to allow multiple hosts use the same port range, we update
+		   the 'saddr' after previous trigger has a reply connection. */
+#if 0
+		if (trig->reply) {
+			trig->srcip = iph->saddr;
+			trig->reply = 0;
+		}
+#else
+		/*
+		 * Well, CD-Router verifies Port-Triggering to support multiple LAN hosts can
+		 * use trigger ports after mappings are aged out. It tests as bellowing ...
+		 *
+		 * net2phone-1  UDP:6801        TCP:30000..30000
+		 * net2phone-2  UDP:6801        UDP:3000..3000
+		 *
+		 * 1. 192.168.1.2 --> UDP:6801 --> verify TCP:30000 opened ?
+		 * 2. waiting for all trigger port mappings to be deleted.
+		 * 3. 192.168.1.3 --> UDP:6801 --> verify TCP:30000 opened ?
+		 *
+		 * 4. 192.168.1.2 --> UDP:6801 --> verify UDP:3000 opened ?
+		 * 5. waiting for all trigger port mappings to be deleted.
+		 * 6. 192.168.1.3 --> UDP:6801 --> verify UDP:3000 opened ?
+		 *
+		 * Between steps 3 and 4, it doesn't wait time out, and on step 3, it has created
+		 * two trigger items: [A].  TCP:30000 ('reply' = 1); B). UDP:3000 ('reply' = 0). so
+		 * on step 4, it can't update the 'srcip' value from '192.168.1.3' to '192.168.1.2'.
+		 * For passing test, and let the customer be happy, we ... ^_^, it is not so bad.
+		 */
+		trig->srcip = iph->saddr;
+#endif
+	} else {
+		/* Create new trigger */
+		trig = (struct ipt_trigger *)kzalloc(sizeof(struct ipt_trigger), GFP_ATOMIC);
+		if (trig == NULL) {
+			DEBUGP("No memory for adding Tigger!\n");
+			return XT_CONTINUE;
+		}
+
+		INIT_LIST_HEAD(&trig->list);
+		timer_setup(&trig->timeout, NULL, 0);
+		trig->timeout.function = (void *)(struct timer_list *)trigger_timeout;
+		trig->timeout.expires = jiffies + (TRIGGER_TIMEOUT * HZ);
+
+		trig->srcip = iph->saddr;
+		trig->mproto = iph->protocol;
+		trig->rproto = info->proto;
+		trig->reply = 0;
+		trig->net = dev_net((*pskb)->dev);
+		memcpy(&trig->ports, &info->ports, sizeof(struct ipt_trigger_ports));
+
+		/* add to global table of trigger and start timer. */
+		write_lock_bh(&trigger_lock);
+		list_add(&trig->list, &trigger_list);
+		add_timer(&trig->timeout);
+		write_unlock_bh(&trigger_lock);
+	}
+
+	return XT_CONTINUE;	/* We don't block any packet. */
+}
+
+static inline int trigger_in_matched(const struct ipt_trigger *i, const u_int16_t proto, const u_int16_t dport)
+{
+	u_int16_t rproto = i->rproto ? : proto;
+
+	return ((rproto == proto) && (i->ports.rport[0] <= dport)
+		&& (i->ports.rport[1] >= dport));
+}
+
+static unsigned int trigger_in(struct sk_buff **pskb)
+{
+	struct ipt_trigger *trig;
+	struct nf_conn *ct;
+	enum ip_conntrack_info ctinfo;
+	struct iphdr *iph;
+	struct tcphdr *tcph;
+
+	ct = nf_ct_get(*pskb, &ctinfo);
+	if ((ct == NULL) || !(ct->status & IPS_TRIGGER))
+		return XT_CONTINUE;
+
+	iph = ip_hdr(*pskb);
+	tcph = (void *)iph + (iph->ihl << 2);	/* Might be TCP, UDP */
+
+	/* Check if the trigger-ed range has already existed in 'trigger_list'. */
+	trig = LIST_FIND(&trigger_list, trigger_in_matched, struct ipt_trigger *, iph->protocol, ntohs(tcph->dest));
+
+	if (trig != NULL) {
+		DEBUGP("Trigger In: from %pI4, destination port %u\n", &iph->saddr, ntohs(tcph->dest));
+		/* Yeah, it exists. We need to update(delay) the destroying timer. */
+		trigger_timer_refresh(trig);
+
+		return NF_ACCEPT;	/* Accept it, or the imcoming packet could be 
+					   dropped in the FORWARD chain */
+	}
+
+	return XT_CONTINUE;	/* Our job is the interception. */
+}
+
+static unsigned int trigger_dnat(struct sk_buff **pskb, unsigned int hooknum)
+{
+	struct ipt_trigger *trig;
+	struct iphdr *iph;
+	struct tcphdr *tcph;
+	struct nf_conn *ct;
+	enum ip_conntrack_info ctinfo;
+	struct nf_nat_range2 newrange;
+
+	iph = ip_hdr(*pskb);
+	tcph = (void *)iph + (iph->ihl << 2);	/* Might be TCP, UDP */
+
+	NF_CT_ASSERT(hooknum == NF_INET_PRE_ROUTING);
+	/* Check if the trigger-ed range has already existed in 'trigger_list'. */
+	trig = LIST_FIND(&trigger_list, trigger_in_matched, struct ipt_trigger *, iph->protocol, ntohs(tcph->dest));
+
+	if (trig == NULL || trig->srcip == 0)
+		return XT_CONTINUE;	/* We don't block any packet. */
+
+	trig->reply = 1;	/* Confirm there has been a reply connection. */
+	ct = nf_ct_get(*pskb, &ctinfo);
+	NF_CT_ASSERT(ct && (ctinfo == IP_CT_NEW));
+
+	DEBUGP("Trigger DNAT: %pI4 ", &trig->srcip);
+	nf_ct_dump_tuple_ip(&ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple);
+
+	/* Alter the destination of imcoming packet. */
+	newrange.flags       = NF_NAT_RANGE_MAP_IPS;
+	newrange.min_addr.ip = trig->srcip;
+	newrange.max_addr.ip = trig->srcip;
+
+	ct->status |= IPS_TRIGGER;
+
+	/* Hand modified range to generic setup. */
+	return nf_nat_setup_info(ct, &newrange, NF_NAT_MANIP_DST);
+}
+
+static inline int trigger_refresh_matched(const struct ipt_trigger *i, u_int16_t proto, u_int16_t sport)
+{
+	u_int16_t rproto = i->rproto ? : proto;
+
+	return rproto == proto && i->ports.rport[0] <= sport && i->ports.rport[1] >= sport;
+}
+
+static unsigned int trigger_refresh(struct sk_buff **pskb)
+{
+	struct iphdr *iph;
+	struct tcphdr *tcph;
+	struct ipt_trigger *trig;
+	struct nf_conn *ct;
+	enum ip_conntrack_info ctinfo;
+
+	ct = nf_ct_get(*pskb, &ctinfo);
+	if ((ct == NULL) || !(ct->status & IPS_TRIGGER))
+		return XT_CONTINUE;
+
+	iph = ip_hdr(*pskb);
+	tcph = (void *)iph + (iph->ihl << 2);	/* Might be TCP, UDP */
+
+	trig = LIST_FIND(&trigger_list, trigger_refresh_matched, struct ipt_trigger *, iph->protocol, tcph->source);
+	if (trig != NULL) {
+		DEBUGP("Trigger Refresh: from %pI4, %u\n", &iph->saddr, ntohs(tcph->source));
+		trigger_timer_refresh(trig);
+	}
+
+	return XT_CONTINUE;
+}
+
+static unsigned int target(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	const struct ipt_trigger_info *info = par->targinfo;
+	unsigned int hooknum = par->state->hook;
+	const struct iphdr *iph = ip_hdr(skb);
+
+	/* DEBUGP("%s: type = %s\n", __FUNCTION__, 
+	   (info->type == IPT_TRIGGER_DNAT) ? "dnat" :
+	   (info->type == IPT_TRIGGER_IN) ? "in" : "out"); */
+
+	/* The Port-trigger only supports TCP and UDP. */
+	if ((iph->protocol != IPPROTO_TCP) && (iph->protocol != IPPROTO_UDP))
+		return XT_CONTINUE;
+
+	if (info->type == IPT_TRIGGER_OUT)
+		return trigger_out(&skb, par->targinfo);
+	else if (info->type == IPT_TRIGGER_IN)
+		return trigger_in(&skb);
+	else if (info->type == IPT_TRIGGER_DNAT)
+		return trigger_dnat(&skb, hooknum);
+	else if (info->type == IPT_TRIGGER_REFRESH)
+		return trigger_refresh(&skb);
+
+	return XT_CONTINUE;
+}
+
+static int checkentry(const struct xt_tgchk_param *par)
+{
+	unsigned int hook_mask = par->hook_mask;
+	const struct ipt_trigger_info *info = par->targinfo;
+	const char *tablename = par->table;
+
+	if ((strcmp(tablename, "mangle") == 0)) {
+		DEBUGP("trigger_check: bad table `%s'.\n", tablename);
+		return -EINVAL;
+	}
+	if (hook_mask & ~((1 << NF_INET_PRE_ROUTING) | (1 << NF_INET_FORWARD))) {
+		DEBUGP("trigger_check: bad hooks %x.\n", hook_mask);
+		return -EINVAL;
+	}
+	if (info->proto) {
+		if (info->proto != IPPROTO_TCP && info->proto != IPPROTO_UDP) {
+			DEBUGP("trigger_check: bad proto %d.\n", info->proto);
+			return -EINVAL;
+		}
+	}
+	if (info->type == IPT_TRIGGER_OUT) {
+		if (!info->ports.mport[0] || !info->ports.rport[0]) {
+			DEBUGP("trigger_check: Try 'iptables -j TRIGGER -h' for help.\n");
+			return -EINVAL;
+		}
+	}
+
+	/* Empty the 'trigger_list' */
+	trigger_flush();
+
+	return 0;
+}
+
+static struct xt_target redirect_reg = {
+	.name = "TRIGGER",
+	.family = NFPROTO_IPV4,
+	.target = target,
+	.targetsize = sizeof(struct ipt_trigger_info),
+	.checkentry = checkentry,
+	.me = THIS_MODULE,
+};
+
+static int __init init(void)
+{
+	return xt_register_target(&redirect_reg);
+}
+
+static void __exit fini(void)
+{
+	xt_unregister_target(&redirect_reg);
+	trigger_flush();
+}
+
+module_init(init);
+module_exit(fini);
diff --git a/net/netfilter/xt_connmark.c b/net/netfilter/xt_connmark.c
index 5e1341f06..afda127d4 100644
--- a/net/netfilter/xt_connmark.c
+++ b/net/netfilter/xt_connmark.c
@@ -61,6 +61,15 @@ connmark_tg_shift(struct sk_buff *skb, const struct xt_connmark_tginfo3 *info)
 			nf_conntrack_event_cache(IPCT_MARK, ct);
 		}
 		break;
+	 case XT_CONNMARK_SET_RETURN:
+		// Set connmark and mark, apply mask to mark, do XT_RETURN      - zzz
+		newmark = ct->mark = info->ctmark;
+		newmark &= info->ctmask;
+		if (newmark != skb->mark) {
+			skb->mark = newmark;
+		}
+		//return XT_RETURN;     // set return here will cause traffic blocked !?
+		break;
 	case XT_CONNMARK_SAVE:
 		new_targetmark = (skb->mark & info->nfmask);
 		if (info->shift_dir == D_SHIFT_RIGHT)
-- 
2.39.2

