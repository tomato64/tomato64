#!/bin/sh
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/home/root:


. nvram_ops

[ -f /tmp/ethernet.state.tmp ] && rm /tmp/ethernet.state.tmp
[ -f /tmp/ethernet.state1 ] && rm /tmp/ethernet.state1
[ -f /tmp/ethernet.state2 ] && rm /tmp/ethernet.state2
[ -f /tmp/ethernet.state3 ] && rm /tmp/ethernet.state3

VWAN=$(NG wan_ifname)

ROUTERNAME=$(NG t_fix1)

VPORTLAST=$(NG $VWAN'ports' | awk '{print $NF}' | sed 's/[^0-9]*//g')
VPORT=$(NG $VWAN'ports' | awk '{print $1}' | sed 's/[^0-9]*//g')
# BCMARM-BEGIN
#check if there is a wan port
[ "$VPORTLAST" == "$VPORT" ] && {
	[ "$ROUTERNAME" == "RT-AC56U" ] ||
	[ "$ROUTERNAME" == "RT-AC56S" ] ||
	[ "$ROUTERNAME" == "RT-AC3100" ] ||
	[ "$ROUTERNAME" == "RT-AC88U" ] ||
	[ "$ROUTERNAME" == "DIR868L" ] ||
	[ "$ROUTERNAME" == "EA6200" ] ||
	[ "$ROUTERNAME" == "EA6350v1" ] ||
	[ "$ROUTERNAME" == "EA6350v2" ] ||
	[ "$ROUTERNAME" == "EA6400" ] ||
	[ "$ROUTERNAME" == "EA6500v2" ] ||
	[ "$ROUTERNAME" == "EA6700" ] ||
	[ "$ROUTERNAME" == "R7900" ] ||
	[ "$ROUTERNAME" == "R8000" ] && {
#special case - Port 4 for WAN
		VPORT="4"
	} || {
#default case - Port 0 for WAN
		VPORT="0"
	}
}
# BCMARM-END

# BCMARMNO-BEGIN
#check if there is a wan port
[ "$VPORTLAST" == "$VPORT" ] && {
	[ "$ROUTERNAME" == "RT-N10P" ] ||
	[ "$ROUTERNAME" == "RT-N12 A1" ] ||
	[ "$ROUTERNAME" == "RT-N12 B1" ] ||
	[ "$ROUTERNAME" == "RT-N12 C1" ] ||
	[ "$ROUTERNAME" == "RT-N12 D1" ] ||
	[ "$ROUTERNAME" == "RT-N12 HP" ] ||
	[ "$ROUTERNAME" == "RT-N15U" ] ||
	[ "$ROUTERNAME" == "RT-N53" ] ||
	[ "$ROUTERNAME" == "RT-N53 A1" ] ||
	[ "$ROUTERNAME" == "Share Max N300 (F7D3301/F7D7301) v1" ] ||
	[ "$ROUTERNAME" == "Play Max / N600 HD (F7D4301/F7D8301) v1" ] ||
	[ "$ROUTERNAME" == "WNDR3400" ] ||
	[ "$ROUTERNAME" == "WNDR3400v2" ] ||
	[ "$ROUTERNAME" == "WNDR3400v3" ] ||
	[ "$ROUTERNAME" == "R6300 V1" ] ||
	[ "$ROUTERNAME" == "Share N300 (F7D3302/F7D7302) v1" ] ||
	[ "$ROUTERNAME" == "Play N600 (F7D4302/F7D8302) v1" ] ||
	[ "$ROUTERNAME" == "N600 DB Wireless N+" ] ||
	[ "$ROUTERNAME" == "Dir-620 C1" ] ||
	[ "$ROUTERNAME" == "E800 v1.0" ] ||
	[ "$ROUTERNAME" == "E900 v1.0" ] ||
	[ "$ROUTERNAME" == "E1200 v1.0" ] ||
	[ "$ROUTERNAME" == "E1200 v2.0" ] ||
	[ "$ROUTERNAME" == "E1500 v1.0" ] ||
	[ "$ROUTERNAME" == "E1550 v1.0" ] ||
	[ "$ROUTERNAME" == "E2500 v1.0" ] ||
	[ "$ROUTERNAME" == "E2500 v1/v2/v3" ] ||
	[ "$ROUTERNAME" == "E3200 v1.0" ] ||
	[ "$ROUTERNAME" == "E4200 v1" ] ||
	[ "$ROUTERNAME" == "WNDR3700v3" ] ||
	[ "$ROUTERNAME" == "WNDR4000" ] ||
	[ "$ROUTERNAME" == "WNDR4500 V1" ] ||
	[ "$ROUTERNAME" == "WNDR4500 V2" ] && {
#special case - Port 4 for WAN
		VPORT="4"
	} || {
#default case - Port 0 for WAN
		VPORT="0"
	}
}
# BCMARMNO-END

[ -z "$VPORT" ] && VPORT="0"

robocfg showports | grep Port | awk '{print $1" "$2" "$3}' > /tmp/ethernet.state.tmp

# Search WAN port
SWAN=$(cat /tmp/ethernet.state.tmp | grep "Port $VPORT" | awk '{print $3}')
echo "Port 0: $SWAN" > /tmp/ethernet.state
sed -n -e "/Port $VPORT:/!p" /tmp/ethernet.state.tmp > /tmp/ethernet.state1

# BCMARM-BEGIN
#Xiaomi MiWiFi X-R1D (only 3 Ports; Port 0,2 for LAN and Port 4 for WAN)
[ "$ROUTERNAME" == "MiWiFi" ] && {
	sed -i '/Port 1/d' /tmp/ethernet.state1
	sed -i '/Port 3/d' /tmp/ethernet.state1
}
#Tenda AC15 (only 4 Ports; Port 2,3,4 for LAN and Port 0 for WAN)
[ "$ROUTERNAME" == "AC15" ] && {
	sed -i '/Port 1/d' /tmp/ethernet.state1
}
# BCMARM-END

# EXTSW-NO-BEGIN
sed -i '/Port 5/d' /tmp/ethernet.state1
# EXTSW-NO-END
sed -i '/Port 7/d' /tmp/ethernet.state1
sed -i '/Port 8/d' /tmp/ethernet.state1

NUM="1"
REVERT=$(NG lan_invert)
[ "$REVERT" -eq 1 ] && {
# EXTSW-NO-BEGIN
	cat /tmp/ethernet.state1 | sort -r >> /tmp/ethernet.state2
# EXTSW-NO-END
# EXTSW-BEGIN
	grep 'Port [0-3]' /tmp/ethernet.state1 | sort -r >> /tmp/ethernet.state2
	grep 'Port 5' /tmp/ethernet.state1 >> /tmp/ethernet.state2
# EXTSW-END
	exec 0< /tmp/ethernet.state2
		while read line; test -n "$line"; do
			STATE=$(echo $line | awk '{print $3}')
			echo "Port $NUM: $STATE" >> /tmp/ethernet.state3
			NUM=$((NUM+1))
		done
} || {
	exec 0< /tmp/ethernet.state1
		while read line; test -n "$line"; do
			STATE=$(echo $line | awk '{print $3}')
			echo "Port $NUM: $STATE" >> /tmp/ethernet.state3
			NUM=$((NUM+1))
		done
}

cat /tmp/ethernet.state3 >> /tmp/ethernet.state

[ -f /tmp/ethernet.state.tmp ] && rm /tmp/ethernet.state.tmp
[ -f /tmp/ethernet.state1 ] && rm /tmp/ethernet.state1
[ -f /tmp/ethernet.state2 ] && rm /tmp/ethernet.state2
[ -f /tmp/ethernet.state3 ] && rm /tmp/ethernet.state3
