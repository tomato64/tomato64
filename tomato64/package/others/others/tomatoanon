#!/bin/sh
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/home/root
###############################
# Copyright (C) 2012/2013 shibby
#
# Fixes/updates (C) 2018 - 2025 pedro
#
# The script sends (to the database) information about the router model and the installed version of Tomato.
# The information submitted is 100% anonymous and will be used ONLY for statistical purposes.
# This script does NOT send any private or personal information (such as MAC, IP addresses, etc.).
# The submitted results can be viewed on the https://anon.freshtomato.org page.
# If you don't agree to run this script you can disable it in GUI.
#
# The following data is sent by TomatoAnon:
# - MD5SUM of WAN+LAN MAC addresses - this identifies the router, ex: 1c1dbd4202d794251ec1acf1211bb2c8
# - Router model, ex: Asus RT-AC3200
# - Tomato version installed, ex: 2025.2 K26ARM7 USB
# - Buildtype, ex: AIO-128K
# - Tomato MOD, in our case: FreshTomato
# - Uptime of your router, ex: 7 days
#
###############################


. nvram_ops

MOD=Tomato64
# STUBBYNO-BEGIN
WGET="/usr/bin/wget -q --no-check-certificate"
# STUBBYNO-END
# STUBBY-BEGIN
WGET="/usr/bin/wget -q"
# STUBBY-END

# detect Version and Buildtype
IS_USB=$(NG os_version | grep USB | wc -l)
[ "$IS_USB" -eq 0 ] && {
	VER=$(NG os_version | awk '{ print $1" "$2 }')
} || {
	VER=$(NG os_version | awk '{ print $1" "$2" "$(NF-1) }')
}
BUILDTYPE=$(NG os_version | awk '{ print $NF }')
ANON_ENABLED=$(NG tomatoanon_enable)
ANON_NOTIFY=$(NG tomatoanon_notify)


# update notification script
[ "$ANON_NOTIFY" -eq 1 -a "$1" == "checkver" ] && {
	VER_MAJ=$(echo $VER | awk '{print $1}' | cut -d "." -f1 | sed 's/[^0-9]*//g')
	VER_MNR=$(echo $VER | awk '{print $1}' | cut -d "." -f2 | sed 's/[^0-9]*//g')

# TOMATO64-BEGIN
	RESCHK=$(curl https://api.github.com/repos/tomato64/tomato64/releases/latest -s | jq -r '.name')
# TOMATO64-END

# TOMATO64-REMOVE-BEGIN
# STUBBYNO-BEGIN
	RESCHK=$($WGET -O- "http://freshtomato.org/version.txt")
# STUBBYNO-END
# STUBBY-BEGIN
# BCMARMNO-BEGIN
	URL="https://raw.githubusercontent.com/FreshTomato-Project/freshtomato-mips/refs/heads/mips-master/release/src/router/shared/tomato_version.h"
	RESCHK=$($WGET -O- $URL | grep -E '^#define TOMATO_(MAJOR|MINOR)' | awk -F'"' 'NR==1{major=$2} NR==2{minor=$2} END{print major "." minor}')
# BCMARMNO-END
# BCMARM-BEGIN
	URL="https://raw.githubusercontent.com/FreshTomato-Project/freshtomato-arm/refs/heads/arm-master/release/src-rt-6.x.4708/router/shared/tomato_version.h"
	RESCHK=$($WGET -O- $URL | grep -E '^#define TOMATO_(MAJOR|MINOR)' | awk -F'"' 'NR==1{major=$2} NR==2{minor=$2} END{print major "." minor}')
# BCMARM-END
# STUBBY-END
# TOMATO64-REMOVE-END
	CHKVER_MAJ=$(echo $RESCHK | awk '{print $1}' | cut -d "." -f1 | sed 's/[^0-9]*//g')
	echo $RESCHK | grep "\." && {
		CHKVER_MNR=$(echo $RESCHK | awk '{print $1}' | cut -d "." -f2 | sed 's/[^0-9]*//g')
	} || {
		CHKVER_MNR=""
	}

	RESULT="/tmp/anon.version"

	if [ "$CHKVER_MAJ" -eq "$VER_MAJ" ]; then
		[ ! -z "$CHKVER_MNR" -a "$CHKVER_MNR" -gt "$VER_MNR" ] && {
			echo "have_update=$CHKVER_MAJ.$CHKVER_MNR" > $RESULT
		} || {
			echo "have_update=no" > $RESULT
		}
	elif [ "$CHKVER_MAJ" -gt "$VER_MAJ" ]; then
		[ ! -z "$CHKVER_MNR" ] && {
			echo "have_update=$CHKVER_MAJ.$CHKVER_MNR" > $RESULT
		} || {
			echo "have_update=$CHKVER_MAJ" > $RESULT
		}
	else
		echo "have_update=no" > $RESULT
	fi

	# now add cron job
	cru l | grep checkver || {
		# random minutes 0..59
		MINUTES=$(awk 'BEGIN {srand(); printf "%d", 60*rand()}')

		# random hour 0..23
		HOUR=$(awk 'BEGIN {srand(); printf "%d", 23*rand()}')

		# checkver daily
		cru a checkver "$MINUTES $HOUR * * * /usr/sbin/tomatoanon checkver"
	}

} || {
	cru l | grep checkver || cru d checkver
}

# update anon database
[ "$ANON_ENABLED" -eq 1 -a "$1" == "anonupdate" ] && {
	# collect data
	UPTIME=$(uptime | cut -d "," -f1 | cut -d " " -f4,5)
	WANMAC=$(NG wan_hwaddr)
	LANMAC=$(NG lan_hwaddr)
	MODEL=$(NG t_model_name)
# TOMATO64-X86_64-BEGIN
	ENVIRONMENT=$(virt-what)
	if [ $? -eq 0 ]; then
		if [ -z "${ENVIRONMENT}" ]; then
			ENVIRONMENT="baremetal"
		fi
		ENVIRONMENT=$(echo "$ENVIRONMENT" | tr '\n' '/' | sed 's/\/$//')
	else
		ENVIRONMENT="unknown"
	fi
	MODEL="$MODEL ($ENVIRONMENT)"
# TOMATO64-X86_64-END
	DRIVER=$(wl ver | grep version | awk '{ print $7 }')
	WANMAC_MD5=$(echo "$WANMAC+$LANMAC" | md5sum | awk '{ print $1 }')

	[ ! "$(NG tomatoanon_id)" == "$WANMAC_MD5" ] && {
		NS tomatoanon_id="$WANMAC_MD5"
		NC
	}

	# change all spaces to %20.
	ANONSEND=$(echo "http://anon.freshtomato.org/index.php?wanmac_md5=$WANMAC_MD5&model=$MODEL&version=$VER&buildtype=$BUILDTYPE&driver=$DRIVER&uptime=$UPTIME&mod=$MOD&anon=1" | sed "s/ /%20/g")

	# we have all we need, so send data to Anon database
	RESULT="/tmp/anon.result"
	$WGET -O $RESULT $ANONSEND

	# now add cron job
	cru l | grep anonupdate || {
		# random minutes 0..59
		MINUTES=$(awk 'BEGIN {srand(); printf "%d", 60*rand()}')

		# random hour 0..23
		HOUR=$(awk 'BEGIN {srand(); printf "%d", 23*rand()}')

		# random day of week 0..6
		DAY=$(awk 'BEGIN {srand(); printf "%d", 6*rand()}')

		# update anon one time per week
		cru a anonupdate "$MINUTES $HOUR * * $DAY /usr/sbin/tomatoanon anonupdate"
	}
} || {
	cru l | grep anonupdate || cru d anonupdate
}
