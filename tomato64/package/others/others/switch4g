#!/bin/sh
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/home/root:
#
# Copyright (C) 2015 shibby
#
# - changes/fixes
# - add support for rndis protocol
# Copyright (C) 2018 - 2024 by pedro
#


. nvram_ops

PREFIX="$1"

PID=$$
PIDFILE="/var/run/switch4g_$PREFIX.pid"
READYFILE="/tmp/switch4g_$PREFIX.ready"
DIAGSFILE="/tmp/switch4g_$PREFIX.diags"
STATEFILE="/var/lib/misc/"$PREFIX"_state"
PATHDIAG="/sys/bus/usb/devices"
PATHWAN="/sys/class/net"
MODE=$(NG "$PREFIX"_proto)
LOGS="logger -t switch4g[$PID]"
COUNT_KILL=0 


[ -z "$PREFIX" ] && {
	echo "usage: $0 INTERFACE [connect|disconnect|signal|reset]"
	exit 0
}

[ ! "$MODE" == "lte" ] && exit 0


connect() {
	MTYPE=$(NG "$PREFIX"_modem_type)
	DEVNR=$(NG "$PREFIX"_modem_dev)
	APN=$(NG "$PREFIX"_modem_apn)
	SPEED=$(NG "$PREFIX"_modem_speed)
	BAND=$(NG "$PREFIX"_modem_band)
	ROAMING=$(NG "$PREFIX"_modem_roam)
	IFA=$(NG "$PREFIX"_ifname)
	local TTY DEVALL SYSCFGEX CGPADDR TXTLOG MODESPEED MODEROAM MODEBAND CONNECTED=0 COUNT=1 DONE=0 i
	local SPEEDTXT ROAMTXT BANDTXT RESSPEED RSPEEDTXT RESROAM RROAMTXT RESBAND RBANDTXT

	[ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" -o "$MTYPE" == "qmi_wwan" ] && {
		[ -n "$DEVNR" ] || wayOut "4G MODEM - DIAG interface not found: connection terminated!"
	}

	$LOGS "4G MODEM - connecting ..."

	# non-hilink/1st type
	if [ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" ]; then
		case "$SPEED" in
		     "00")   SPEEDTXT="Auto" ;;
		     "03")   SPEEDTXT="4G only" ;;
		     "02")   SPEEDTXT="3G only" ;;
		     "0302") SPEEDTXT="4G/3G only" ;;
		     "030201") SPEEDTXT="4G/3G/2G" ;;
		     *)      SPEEDTXT="unknown" ;;
		esac

		case "$ROAMING" in
		     "0")  ROAMTXT="Disabled"  ;;
		     "1")  ROAMTXT="Supported" ;;
		     "2")  ROAMTXT="No change" ;;
		     "3")  ROAMTXT="Roam only" ;;
		     *)    ROAMTXT="unknown"   ;;
		esac

		case "$BAND" in
		     "80000") BANDTXT="B20 (800 MHz)" ;;
		     "80")    BANDTXT="B8 (900 MHz)"  ;;
		     "4")     BANDTXT="B3 (1800 MHz)" ;;
		     "1")     BANDTXT="B1 (2100 MHz)" ;;
		     "40")    BANDTXT="B7 (2600 MHz)" ;;
		     "7FFFFFFFFFFFFFFF") BANDTXT="All supported" ;;
		     *)       BANDTXT="unknown"       ;;
		esac

		TTY=$(cat "$DIAGSFILE" | sed "s~"$DEVNR"~~")
		DEVALL="$DEVNR $TTY $DEVNR $TTY $DEVNR $TTY" # try 3x on every interface

		while [ "$CONNECTED" -eq 0 ]; do
			for i in $DEVALL; do

				# disconnect first
				MODE="AT^NDISDUP=1,0" gcom -d "$i" -s /etc/gcom/setmode.gcom
				sleep 2

				# check for current type of network
				SYSCFGEX=$(MODE="AT^SYSCFGEX?" gcom -d "$i" -s /etc/gcom/setverbose.gcom)

				RESSPEED=$(echo "$SYSCFGEX" | grep SYSCFGEX | grep '"' | cut -d '"' -f2)
				RESROAM=$(echo "$SYSCFGEX" | grep SYSCFGEX | grep ',' | cut -d ',' -f3)
				RESBAND=$(echo "$SYSCFGEX" | grep SYSCFGEX | grep ',' | cut -d ',' -f5 | tr -d '\r')

				case "$RESSPEED" in
				     "00")   RSPEEDTXT="Auto" ;;
				     "03")   RSPEEDTXT="4G only" ;;
				     "02")   RSPEEDTXT="3G only" ;;
				     "0302") RSPEEDTXT="4G/3G only" ;;
				     "030201") RSPEEDTXT="4G/3G/2G" ;;
				     *)      RSPEEDTXT="unknown" ;;
				esac

				case "$RESROAM" in
				     "0")  RROAMTXT="Disabled"  ;;
				     "1")  RROAMTXT="Supported" ;;
				     "2")  RROAMTXT="No change" ;;
				     "3")  RROAMTXT="Roam only" ;;
				     *)    RROAMTXT="unknown"   ;;
				esac

				case "$RESBAND" in
				     "80000") RBANDTXT="B20 (800 MHz)" ;;
				     "80")    RBANDTXT="B8 (900 MHz)"  ;;
				     "4")     RBANDTXT="B3 (1800 MHz)" ;;
				     "1")     RBANDTXT="B1 (2100 MHz)" ;;
				     "40")    RBANDTXT="B7 (2600 MHz)" ;;
				     "7FFFFFFFFFFFFFFF") RBANDTXT="All supported" ;;
				     *)       RBANDTXT="unknown"       ;;
				esac

				# change network type, band and roaming if required
				[ "$SPEED" != "$RESSPEED" ] && {
					TXTLOG="Network type changed: was '$RSPEEDTXT', now '$SPEEDTXT'."
					MODESPEED=$SPEED
				} || {
					TXTLOG="Network type is '$RSPEEDTXT'."
					MODESPEED=$RESSPEED
				}
				[ "$ROAMING" != "$RESROAM" ] && {
					TXTLOG="$TXTLOG Roaming changed: was '$RROAMTXT', now '$ROAMTXT'."
					MODEROAM=$ROAMING
				} || {
					TXTLOG="$TXTLOG Roaming is '$RROAMTXT'."
					MODEROAM=$RESROAM
				}
				[ "$SPEED" == "03" -a "$BAND" != "$RESBAND" ] && {
					TXTLOG="$TXTLOG Band changed: was '$RBANDTXT', now '$BANDTXT'"
					MODEBAND=$BAND
				} || {
					TXTLOG="$TXTLOG Band is '$RBANDTXT'"
					MODEBAND=$RESBAND
				}

				$LOGS "4G MODEM - $TXTLOG (device $i)"

				[ "$SPEED" != "$RESSPEED" ] || [ "$ROAMING" != "$RESROAM" ] || ([ "$SPEED" == "03" ] && [ "$BAND" != "$RESBAND" ]) && {
					MODE="AT^SYSCFGEX=\"$MODESPEED\",3fffffff,$MODEROAM,4,$MODEBAND,," gcom -d "$i" -s /etc/gcom/setverbose.gcom
					sleep 3
				}

				# connect
				MODE="AT^NDISDUP=1,1,\"$APN\"" gcom -d "$i" -s /etc/gcom/setverbose.gcom
				sleep 2

				CGPADDR=$(MODE="AT+CGPADDR=1" gcom -d "$i" -s /etc/gcom/setverbose.gcom)

				[ "$(echo "$CGPADDR" | grep "+CGPADDR:" | wc -l)" -eq 1 ] && {
					$LOGS "4G MODEM - connected (device $i) ..."
					CONNECTED=1
					[ "$(NG "$PREFIX"_modem_dev)" != "$i" ] && {
						NS "$PREFIX"_modem_dev="$i"
						NC
					}
					break
				} || {
					$LOGS "4G MODEM - connection failed (device $i) [$COUNT] ..."
					COUNT=$((COUNT+1))
					sleep 3
				}
			done

			# still not connected?
			[ "$CONNECTED" -eq 0 ] && {
				disconnect
				[ "$(NG mwan_cktime)" -gt 0 ] && {
					modemReset
					mwwatchdog add
					wayOut "4G MODEM - connection failed: mwwatchdog enabled"
				} || {
					mwwatchdog del
					wayOut "4G MODEM - connection failed: process terminated!"
				}
			}
		done

	# non-hilink/2nd type
	elif [ "$MTYPE" == "qmi_wwan" ]; then
		local DATAFORMAT TIMEOUT=30 TIMECOUNT=0 CONNSTAT
		# for feature use
		local AUTOCONNECT="" PROFILE="" AUTH="" USERNAME="" PASSWORD=""

		case "$SPEED" in
		     "00")   SPEEDTXT="all" ;;
		     "03")   SPEEDTXT="lte" ;;
		     "02")   SPEEDTXT="umts,cdma" ;;
		     "0302") SPEEDTXT="lte,umts,cdma" ;;
		     "030201") SPEEDTXT="lte,umts,cdma,gsm" ;;
		     *)      SPEEDTXT="all" ;;
		esac

		case "$ROAMING" in
		     "0")  ROAMTXT="off"  ;;
		     "1")  ROAMTXT="any"  ;;
		     "3")  ROAMTXT="only" ;;
		     *)    ROAMTXT="any"  ;;
		esac

		# devices need timeout, otherwise they hang
		sleep 6

		# try to clear previous autoconnect state
		uqmiCall "-t 1000 --stop-network 0xffffffff --autoconnect"
		uqmiCall "-t 1000 --set-ip-family ipv6 --stop-network 0xffffffff --autoconnect"

		# go online
		uqmiCall "-t 1000 --set-device-operating-mode online"

		# set IP format
		uqmiCall "-t 1000 --set-data-format 802.3"
		uqmiCall "-t 1000 --wda-set-data-format 802.3"
		DATAFORMAT=$(uqmiCall "-t 1000 --wda-get-data-format")

		[ "$DATAFORMAT" == '"raw-ip"' ] && {
			[ -f $PATHWAN/$IFA/qmi/raw_ip ] || wayOut "Device only supports raw-ip mode but is missing this required driver attribute: $PATHWAN/$IFA/qmi/raw_ip"

			$LOGS "4G MODEM - device does not support 802.3 mode. Informing driver of raw-ip only for $IFA ..."
			echo "Y" > $PATHWAN/$IFA/qmi/raw_ip
		}

		uqmiCall "-t 1000 --sync"
		uqmiCall "-t 20000 --network-register"

		$LOGS "4G MODEM - waiting for network registration ..."
		sleep 5

		while [ $(echo "$(uqmiCall "-t 1000 --get-serving-system")" | grep searching | wc -l) -ne 0 ]; do
			[ -n "$DEVNR" ] || wayOut "4G MODEM - DIAG interface not found!"
			[ "$TIMECOUNT" -lt "$TIMEOUT" ] && {
				TIMECOUNT=$((TIMECOUNT+1))
				sleep 1
			} || {
				wayOut "4G MODEM - network registration failed!"
			}
		done

		# set network type (all,lte,umts,cdma,td-scdma)
		uqmiCall "-t 1000 --set-network-modes $SPEEDTXT"
		$LOGS "4G MODEM - network type is set to '$SPEEDTXT'"

		# set roaming
		uqmiCall "-t 1000 --set-network-roaming $ROAMTXT"
		$LOGS "4G MODEM - roaming is set to '$ROAMTXT'"

		# get client id for wds
		CLID=$(uqmiCall "-t 1000 --get-client-id wds")

		[ $? -ne 0 ] && wayOut "4G MODEM - unable to obtain client ID!"

		NS "$PREFIX"_modem_clid="$CLID"
		$LOGS "4G MODEM - got new client ID: $CLID"

		uqmiCall "-t 5000 --set-client-id wds,$CLID --set-ip-family ipv4"

		while [ "$CONNECTED" -eq 0 ]; do
			[ "$COUNT" -lt 6 ] && {
				# connect
				PDH=$(uqmiCall "-t 5000 --set-client-id wds,$CLID --start-network" 1)

				case $PDH in
				     ''|*[!0-9]*)
						$LOGS "4G MODEM - connection failed: (device $DEVNR) session ID: $PDH [$COUNT] ..."
						COUNT=$((COUNT+1))
						sleep 5
					;;
				     *)
						$LOGS "4G MODEM - connected (device $DEVNR) session ID: $PDH"
						NS "$PREFIX"_modem_pdh="$PDH"
						CONNECTED=1
						break
					;;
				esac
			} || {
				# checked 5 times but still not connected?
				uqmiCall "-t 5000 --set-client-id wds,$CLID --release-client-id wds"

				[ "$(NG mwan_cktime)" -gt 0 ] && {
					modemReset
					mwwatchdog add
					wayOut "4G MODEM - connection failed: mwwatchdog enabled"
				} || {
					mwwatchdog del
					wayOut "4G MODEM - connection failed: process terminated!"
				}
			}
		done

		# check data connection state
		CONNSTAT=$(uqmiCall "-t 1000 --get-data-status")
		[ "$CONNSTAT" == '"connected"' ] || {
			uqmiCall "-t 5000 --set-client-id wds,$CLID --release-client-id wds"

			[ "$(NG mwan_cktime)" -gt 0 ] && {
				modemReset
				mwwatchdog add
				wayOut "4G MODEM - no data link: mwwatchdog enabled"
			} || {
				mwwatchdog del
				wayOut "4G MODEM - no data link: process terminated!"
			}
		}
	fi
	# endif (non-hilink/type)

	COUNT=1

	while [ "$DONE" -eq 0 -a "$COUNT" -lt 6 ]; do
		dhcpc-release $PREFIX
		sleep 1
		dhcpc-renew $PREFIX
		sleep 1

		ifconfig | grep "$IFA" || {
			$LOGS "4G MODEM - WAN IFACE not ready ($IFA) [$COUNT] ..."
			COUNT=$((COUNT+1))
			sleep 2
		} && {
			# TODO: IP is up only every 2nd attempt - temporary fix
			ifconfig | grep -A1 "$IFA" | grep 'inet addr' || {
				dhcpc-release $PREFIX
				sleep 1
				dhcpc-renew $PREFIX
			}

			$LOGS "4G MODEM - WAN IFACE configured ($IFA)"
			DONE=1
			break
		}
	done

	[ "$DONE" -eq 0 ] && {
		[ "$(NG mwan_cktime)" -gt 0 ] && {
			mwwatchdog add
			wayOut "4G MODEM - WAN IFACE failed: mwwatchdog enabled"
		} || {
			mwwatchdog del
			wayOut "4G MODEM - WAN IFACE failed: connection process terminated!"
		}
	}

	echo "1" > $STATEFILE
	mwwatchdog add
}

disconnect() {
	MTYPE=$(NG "$PREFIX"_modem_type)
	DEVNR=$(NG "$PREFIX"_modem_dev)
	CLID=$(NG "$PREFIX"_modem_clid)
	PDH=$(NG "$PREFIX"_modem_pdh)
	local DEVALL j

	$LOGS "4G MODEM - disconnecting ..."
	mwwatchdog del
	dhcpc-release $PREFIX

	if [ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" ]; then
		DEVALL="$DEVNR $(cat "$DIAGSFILE" | sed "s~"$DEVNR"~~")"

		for j in $DEVALL; do # on every interface
			MODE="AT^NDISDUP=1,0" gcom -d "$j" -s /etc/gcom/setmode.gcom
			sleep 2
		done
	elif [ "$MTYPE" == "qmi_wwan" ]; then
		[ -n "$CLID" ] || return
		uqmiCall "-t 5000 --set-client-id wds,$CLID --stop-network 0xffffffff --autoconnect"

		[ -n "$PDH" ] && uqmiCall "-t 5000 --set-client-id wds,$CLID --stop-network $PDH"

		uqmiCall "-t 5000 --set-client-id wds,$CLID --release-client-id wds"
		NS "$PREFIX"_modem_pdh=""
		NS "$PREFIX"_modem_clid=""

		$LOGS "4G MODEM - release Client ID: $CLID"
	fi

	$LOGS "4G MODEM - disconnected"
}

switchMode() {
	VENDOR="" PRODUCT="" MTYPE="" MODULE="" DEVICENAME="" SWITCHED=0 # global
# BCMARM-BEGIN
	MODULES="qmi_wwan huawei_cdc_ncm cdc_ncm rndis_host cdc_ether"
# BCMARM-END
# BCMARMNO-BEGIN
	MODULES="qmi_wwan huawei_ether cdc_ncm rndis_host cdc_ether"
# BCMARMNO-END

	# first remove modules
	for MODULE in $MODULES; do
		modprobe -r $MODULE
	done

	$LOGS "4G MODEM - detecting ..."

	switchMe

	[ "$SWITCHED" -eq 0 ] && $LOGS "4G MODEM - not found in USB_ModeSwitch database, already switched? Loading modules..."
}

switchMe() {
	local COUNT=1 DVDP=0 PATHDEV SWITCH DEVICES IFN_BEFORE DV DP DB DG

	# detect modem
	DEVICES=$(lsusb | awk '{print $6}')

	for SWITCH in $DEVICES; do
		[ "$(ls /etc/usb_modeswitch.d/"$SWITCH" 2>/dev/null | wc -l)" -eq 1 ] && {
			# search for devicename & other data
			for DEVICENAME in $(ls "$PATHDIAG"/ | grep -v ":" | grep "-"); do
				PATHDEV="$PATHDIAG/$DEVICENAME"
				[ -f $PATHDEV/idVendor -a -f $PATHDEV/idProduct -a -f $PATHDEV/uevent ] || continue # skip

				DV=$(cat "$PATHDEV"/idVendor 2>/dev/null)			# vendor
				DP=$(cat "$PATHDEV"/idProduct 2>/dev/null)			# product
				DB=$(grep -s ^BUSNUM "$PATHDEV"/uevent | cut -d "=" -f2)	# BUSNUM
				DG=$(grep -s ^DEVNUM "$PATHDEV"/uevent | cut -d "=" -f2)	# DEVNUM

				[ "$DV" == "$(echo "$SWITCH" | cut -d ":" -f1)" -a "$DP" == "$(echo "$SWITCH" | cut -d ":" -f2)" ] && { # self
					DVDP=1
					break
				}
			done

			[ "$DVDP" -eq 1 ] && {
				# in some cases it needs more time
				COUNT=1
				while [ "$COUNT" -lt 10 ]; do
					sleep 1
					[ -s $PATHDEV/bNumInterfaces ] && {
						IFN_BEFORE=$(cat "$PATHDEV"/bNumInterfaces)
						break
					}
					COUNT=$((COUNT+1))
				done

				$LOGS "4G MODEM FOUND - $SWITCH: switching ..."

				/usr/sbin/usb_modeswitch -Q -c /etc/usb_modeswitch.d/$SWITCH -v $DV -p $DP -b $DB -g $DG

				# need few seconds before modem will be detected once again after switch
				COUNT=1
				while [ "$COUNT" -lt 20 ]; do
					sleep 1
					[ -s $PATHDEV/bNumInterfaces ] && {
						[ "$(cat "$PATHDEV"/bNumInterfaces)" -gt "$IFN_BEFORE" ] && break
					}
					COUNT=$((COUNT+1))
				done
				sleep 1

				VENDOR=$(cat /etc/usb_modeswitch.d/"$SWITCH" | grep TargetVendor | cut -d "=" -f2 | cut -d "x" -f2)
				[ -z "$VENDOR" ] && VENDOR=$(cat "$PATHDEV"/idVendor 2>/dev/null)

				PRODUCT=$(cat "$PATHDEV"/idProduct 2>/dev/null)
				[ -n "$PRODUCT" ] && {
					$LOGS "4G MODEM - ready: $VENDOR:$PRODUCT"
					SWITCHED=1
					break
				}
			}
		}
	done
}

searchWAN() {
	# search WAN interface (usbX, ethX, wwanX)
	WAN="" WANS="" # global
	local FOUND=0

	for MODULE in $MODULES; do
		modprobe $MODULE
		sleep 1

		# check if interface is up
		for WAN in $(ls $PATHWAN/ | grep -e eth -e usb -e wwan); do
			[ -f $PATHWAN/$WAN/uevent -a -f $PATHWAN/$WAN/device/uevent ] || continue

			# check if interface has our MODULE
			[ "$(grep -s ^DRIVER $PATHWAN/$WAN/device/uevent | cut -d "=" -f2)" == "$MODULE" ] && {
				WANS="$WANS $WAN:$(ls $PATHWAN/$WAN/device/ | grep usb | cut -d ":" -f2)"
				$LOGS "4G MODEM - found WAN(s): $WANS"
				FOUND=1
			}
		done
		[ "$FOUND" -eq 1 ] && break

		$LOGS "4G MODEM - WAN ($MODULE) not found ..."
		modprobe -r $MODULE
		sleep 1
	done

	[ "$FOUND" -eq 1 ] && {
		findType # MODULE --> MTYPE

		NS "$PREFIX"_ifname="$WAN"
		NS "$PREFIX"_modem_type="$MTYPE"
		$LOGS "4G MODEM - WAN ($MTYPE) found: using $MODULE module and $WAN as WAN"
	} || {
		[ "$(NG mwan_cktime)" -gt 0 ] && {
			mwwatchdog add
			wayOut "4G MODEM - WAN not found: mwwatchdog enabled"
		} || {
			mwwatchdog del
			wayOut "4G MODEM - WAN not found: connection process terminated!"
		}
	}
}

isDiag() {
	TTYS=$(ls -d $PATHDIAG/$DEVICENAME/${DEVICENAME}*/tty?* 2>/dev/null | sed -e "s/.*\/\//.*/g" -e "s/.*\//\/dev\//g" | tr "\n" " " | sed -e "s/  */ /g" -e "s,^ *,,; s, *$,,")
}

searchDiag() {
	DEVNR=""
	local TTYS="" UQMIRET="" UQMIPID=""
	local PATHDEV WAN IFACE TTY

	[ -z "$DEVICENAME" ] && DEVICENAME=$(ls -d $PATHWAN/$WAN/device/driver/*[0-9-:\.] 2>/dev/null | tr "\n" " " | sed -e "s/.*\/\//.*/g" -e "s/.*\///g" -e "s/:.*//g")
	[ -z "$VENDOR" ] && VENDOR=$(cat "$PATHDIAG"/"$DEVICENAME"/idVendor 2>/dev/null)
	[ -z "$PRODUCT" ] && PRODUCT=$(cat "$PATHDIAG"/"$DEVICENAME"/idProduct 2>/dev/null)

	if [ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" ]; then
		isDiag # --> TTYS

		[ -z "$TTYS" ] && {
			[ "$(lsmod | grep usbserial | wc -l)" -gt 0 -a -n "$VENDOR" -a -n "$PRODUCT" ] && {
				$LOGS "4G MODEM - add ($VENDOR:$PRODUCT) to already loaded usbserial module"
				echo "$VENDOR $PRODUCT" > /sys/bus/usb-serial/drivers/generic/new_id
			} || {
				[ -n "$VENDOR" -a -n "$PRODUCT" ] && {
					$LOGS "4G MODEM - loading usbserial module ($VENDOR:$PRODUCT)"
					insmod usbserial vendor=0x$VENDOR product=0x$PRODUCT
				} || {
					# VENDOR/PRODUCT unknown, so try for every possible device...
					for DEVICENAME in $(ls "$PATHDIAG"/ | grep -v ":" | grep "-"); do
						PATHDEV="$PATHDIAG/$DEVICENAME"
						[ -f $PATHDEV/idVendor -a -f $PATHDEV/idProduct -a -f $PATHDEV/uevent ] || continue # skip

						VENDOR=$(cat "$PATHDEV"/idVendor 2>/dev/null)	# vendor
						PRODUCT=$(cat "$PATHDEV"/idProduct 2>/dev/null)	# product
						$LOGS "4G MODEM - try to load usbserial module ($VENDOR:$PRODUCT) for device $DEVICENAME ..."

						modprobe -r usbserial
						insmod usbserial vendor=0x$VENDOR product=0x$PRODUCT
						sleep 1
						isDiag # --> TTYS
						[ -n "$TTYS" ] && {
							# found
							$LOGS "4G MODEM - found: using usbserial module"
							break
						}
					done
				}
			}
			sleep 1

			isDiag # --> TTYS
		}

		[ -n "$TTYS" ] && {
			$LOGS "4G MODEM - ready: DIAG(s) found ($TTYS)"
			echo $TTYS > $DIAGSFILE
			DEVNR=$(echo "$TTYS" | cut -d " " -f1)
			NS "$PREFIX"_modem_dev="$DEVNR"
			NS "$PREFIX"_modem_devicename="$DEVICENAME"
		}

	elif [ "$MTYPE" == "qmi_wwan" ]; then
		TTYS=$(ls -d $PATHDIAG/$DEVICENAME/${DEVICENAME}*/usb:cdc-wdm?* 2>/dev/null | sed -e "s/.*\/\//.*/g" -e "s/.*://g")

		[ -n "$TTYS" ] && {
			$LOGS "4G MODEM - DIAG(s) found ($TTYS)"

			for TTY in $TTYS; do
				DEVNR="/dev/$TTY"
				uqmiCall "-t 3000 --get-capabilities" 2 # in a background
				sleep 2

				UQMIPID=$(ps | grep [g]et-capabilities | awk '{print $1}')
				# hangs?
				[ -n "$UQMIPID" ] && {
					kill -9 $UQMIPID
					sleep 2
					DEVNR=""
				# it works
				} || {
					# check which WWAN is the working one (if more than one diag is found)
					for WAN in $WANS; do
						IFACE=$(echo $WAN | cut -d ":" -f1)
						[ "/dev/$(echo $WAN | cut -d ":" -f2)" == "$DEVNR" ] && {
							$LOGS "4G MODEM - setting/updating WAN: $IFACE"
							NS "$PREFIX"_ifname="$IFACE"
						}
					done

					# final check
					UQMIRET=$(uqmiCall "-t 3000 --get-capabilities")
					case "$UQMIRET" in
					     *data_service*) break ;;
					esac
				}
			done

			TTYS=""
			[ -n "$DEVNR" ] && {
				TTYS="$DEVNR"
				echo $TTYS > $DIAGSFILE
				$LOGS "4G MODEM - ready: working DIAG is ($TTYS)"
				NS "$PREFIX"_modem_dev="$TTYS"
				NS "$PREFIX"_modem_devicename="$DEVICENAME"
			}
		}
	fi

	[ -z "$TTYS" ] && {
		[ "$(NG mwan_cktime)" -gt 0 ] && {
			mwwatchdog add
			modemReset
			wayOut "4G MODEM - DIAG(s) not found: mwwatchdog enabled"
		} || {
			mwwatchdog del
			wayOut "4G MODEM - DIAG(s) not found: connection process terminated!"
		}
	}
}

findType() {
	if [ "$MODULE" == "cdc_ether" ]; then
		MTYPE="hilink"
	elif [ "$MODULE" == "cdc_ncm" ]; then
		MTYPE="non-hilink"
	elif [ "$MODULE" == "huawei_cdc_ncm" ]; then
		MTYPE="huawei-non-hilink"
	elif [ "$MODULE" == "huawei_ether" ]; then
		MTYPE="hw-ether"
	elif [ "$MODULE" == "qmi_wwan" ]; then
		MTYPE="qmi_wwan"
	elif [ "$MODULE" == "rndis_host" ]; then
		MTYPE="rndis_host"
	else
		MTYPE="unknown"
	fi
}

modemReset() {
	# TODO: reset should also be performed if the connection fails X times at any given time
	local DNAME=$(NG "$PREFIX"_modem_devicename)

	$LOGS "4G MODEM - resetting the modem $DNAME ..."

	rm -f $READYFILE &>/dev/null

	echo 0 > "$PATHDIAG"/"$DNAME"/authorized
	sleep 1
	echo 1 > "$PATHDIAG"/"$DNAME"/authorized
}

setPIN() {
	local PIN=$(NG "$PREFIX"_modem_pin)
	local IS_DONE=0 COUNT=1 TIMEOUT PINVAL STATUS PIN_STATUS PIN_VERIFY_TRIES PIN_EXT_STATUS=0

	$LOGS "4G MODEM - waiting for SIM initialization"

	[ -n "$DEVNR" ] || { wayOut "4G MODEM - DIAG interface not found!" ; }

	[ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" ] && {
		MODE="AT+CFUN=1" gcom -d "$DEVNR" -s /etc/gcom/setverbose.gcom # set as online mode (default value)
		STATUS=$(MODE="AT^CPIN?" gcom -d "$DEVNR" -s /etc/gcom/setverbose.gcom) # extended PIN status (ie. Huawei modems)
		[ -z "$(echo "$STATUS" | grep OK)" -o "$(echo "$STATUS" | grep ERR)" ] && { # error?
			COUNT=1
			while [ "$COUNT" -lt 4 ]; do # try 3 times
				STATUS=$(MODE="AT+CPIN?" gcom -d "$DEVNR" -s /etc/gcom/setverbose.gcom) # std PIN status

				[ -z "$(echo "$STATUS" | grep OK)" -o "$(echo "$STATUS" | grep ERR)" ] && { # error?
					COUNT=$((COUNT+1))
					sleep 1
				} || {
					break
				}
			done
			[ -n "$PIN" -a "$COUNT" -ge "3" ] && { wayOut "4G MODEM - Error reading SIM status!"; }

			PIN_STATUS=$(echo "$STATUS" | grep CPIN: | cut -d ":" -f2 | awk '{$1=$1};1')
		} || {
			PIN_EXT_STATUS=1
			PIN_STATUS=$(echo "$STATUS" | grep CPIN: | cut -d ":" -f2 | awk '{$1=$1};1' | cut -d "," -f1)
			PIN_VERIFY_TRIES=$(echo "$STATUS" | grep CPIN: | cut -d "," -f4)
		}

		# verify pin
		case "$PIN_STATUS" in
			"READY" | "READY^M")
				$LOGS "4G MODEM - PIN verification is not required"
				IS_DONE=1
				;;
			"SIM PUK")
				wayOut "4G MODEM - SIM locked PUK required"
				;;
			"SIM PIN" | "SIM PIN2")
				[ "$PIN_EXT_STATUS" -eq "1" -a "$PIN_VERIFY_TRIES" -lt "3" ] && { wayOut "4G MODEM - PIN verify count value is $PIN_VERIFY_TRIES this is below the limit of 3" ; }
				[ -n "$PIN" ] && {
					PINVAL=$(MODE="AT+CPIN=\"$PIN\"" gcom -d "$DEVNR" -s /etc/gcom/setverbose.gcom)
					[ -z "$(echo "$PINVAL" | grep OK)" -o "$(echo "$PINVAL" | grep ERR)" ] && { wayOut "4G MODEM - Unable to verify PIN" ; }
					IS_DONE=1
				} || {
					wayOut "4G MODEM - PIN not specified but required"
				}
				;;
			*)
				wayOut "4G MODEM - PIN status failed (${PIN_STATUS:-sim_not_present})"
			;;
		esac
	}

	[ "$MTYPE" == "qmi_wwan" ] && {
		# timeout 3s for first call to avoid hanging uqmi
		uqmiCall "-t 3000 --get-pin-status"

		while uqmiCall "-t 1000 --get-pin-status" | grep '"UIM uninitialized"'; do
			[ -n "$DEVNR" ] || { wayOut "4G MODEM - DIAG interface not found!" ; }

			[ "$COUNT" -lt 30 ] && {
				COUNT=$((COUNT+1))
				sleep 1
			} || {
				wayOut "4G MODEM - SIM not initialized!"
			}
		done

		# check if UIM application is stuck in illegal state
		COUNT=1
		while true; do
			STATUS=$(uqmiCall "-t 1000 --uim-get-sim-state" | cut -d "," -f2 | cut -d ":" -f2 | tr -d '"')

			# SIM card is either completely absent or state is labeled as illegal
			# try to power-cycle the SIM card to recover from this state
			[ -z "$STATUS" -o "$STATUS" == "illegal" ] && {
				$LOGS "4G MODEM - SIM in illegal state: Power-cycling SIM"

				# try to reset SIM application
				uqmiCall "-t 1000 --uim-power-off --uim-slot 1"
				sleep 3
				uqmiCall "-t 1000 --uim-power-on --uim-slot 1"

				[ "$COUNT" -lt 10 ] && {
					COUNT=$((COUNT+1))
					sleep 1
					continue
				}

				# recovery failed
				wayOut "4G MODEM - SIM recovery failed!"
			} || {
				break
			}
		done

		# verify pin
		if uqmiCall "-t 1000 --uim-get-sim-state" | grep -q '"Not supported"\|"Invalid QMI command"' && uqmiCall "-t 1000 --get-pin-status" | grep -q '"Not supported"\|"Invalid QMI command"' ; then
			[ -n "$PIN" ] && {
				uqmiCall "-t 1000 --verify-pin1 $PIN" || uqmiCall "-t 1000 --uim-verify-pin1 $PIN" || { wayOut "4G MODEM - Unable to verify PIN!" ; }
				IS_DONE=1
			}
		else
			STATUS=$(uqmiCall "-t 1000 --get-pin-status")
			PIN_STATUS=$(echo "$STATUS" | cut -d "," -f1 | cut -d ":" -f2 | tr -d '"')
			PIN_VERIFY_TRIES=$(echo "$STATUS" | cut -d "," -f2 | cut -d ":" -f2)

			[ -z "$PIN_STATUS" ] && {
				STATUS=$(uqmiCall "-t 1000 --uim-get-sim-state")
				PIN_STATUS=$(echo "$STATUS" | cut -d "," -f3 | cut -d ":" -f2 | tr -d '"')
				PIN_VERIFY_TRIES=$(echo "$STATUS" | cut -d "," -f4 | cut -d ":" -f2)
			}

			case "$PIN_STATUS" in
				disabled)
					$LOGS "4G MODEM - PIN verification is disabled"
					IS_DONE=1
					;;
				blocked)
					wayOut "4G MODEM - SIM locked PUK required"
					;;
				not_verified)
					[ "$PIN_VERIFY_TRIES" -lt "3" ] && { wayOut "4G MODEM - PIN verify count value is $PIN_VERIFY_TRIES this is below the limit of 3" ; }
					[ -n "$PIN" ] && {
						uqmiCall "-t 1000 --verify-pin1 $PIN" || uqmiCall "-t 1000 --uim-verify-pin1 $PIN" || { wayOut "4G MODEM - Unable to verify PIN" ; }
						IS_DONE=1
					} || {
						wayOut "4G MODEM - PIN not specified but required"
					}
					;;
				verified)
					$LOGS "4G MODEM - PIN already verified"
					IS_DONE=1
					;;
				*)
					wayOut "4G MODEM - PIN status failed (${PIN_STATUS:-sim_not_present})"
				;;
			esac
		fi
	}

	[ "$IS_DONE" -ne 1 ] && {
		mwwatchdog del
		wayOut "4G MODEM - SIM locked: connection process terminated!"
	} || {
		$LOGS "4G MODEM - SIM ready"
	}
}

uqmiCall() {
	# for now, it's the only way to prevent uqmi hangups on two different calls at the same time and on the same device: https://forum.openwrt.org/viewtopic.php?id=63559
	# OPTION: 1 - connect, 2 - background, no option - normal use
	local COUNT=1 COMMAND="$1" OPTION="$2"
	[ -z "$OPTION" ] && OPTION=0

	# wait for other uqmi process(es) to exit...
	while [ "$COUNT" -lt 10 ]; do
		ps | grep [u]qmi || {
			if [ "$OPTION" -eq 1 ]; then
				uqmi -s -d "$DEVNR" $COMMAND \
					${APN:+--apn "$APN"} \
					${PROFILE:+--profile $PROFILE} \
					${AUTH:+--auth-type $AUTH} \
					${USERNAME:+--username $USERNAME} \
					${PASSWORD:+--password $PASSWORD} \
					${AUTOCONNECT:+--autoconnect}
				return
			elif [ "$OPTION" -eq 2 ]; then
				uqmi -s -d "$DEVNR" $COMMAND 1>/dev/null &
				return
			else
				uqmi -s -d "$DEVNR" $COMMAND
				return
			fi
		}
		COUNT=$((COUNT+1))
		sleep 1
	done

	# after 10 seconds, kill process(es) (only one try per running script)
	[ "$COUNT_KILL" -eq 0 ] && {
		uqmiKill $COMMAND $OPTION
	} || {
		wayOut "4G MODEM - uqmi hangs again: exiting!"
	}
}

uqmiKill() {
	local C="$1" O="$2" UQMIPID="" i

	UQMIPID=$(ps | grep [u]qmi | awk '{print $1}')
	[ -n "$UQMIPID" ] && {
		for i in $UQMIPID; do
			$LOGS "4G MODEM - found another uqmi process (PID: $i), killing ..."
			kill -9 $UQMIPID
			sleep 2
		done

		# try once again
		COUNT_KILL=1
		uqmiCall $C $O
	}
}

checkPid() {
	local PRIORITY="$1" PIDNO

	[ -f $PIDFILE ] && {
		PIDNO=$(cat $PIDFILE)
		cat "/proc/$PIDNO/cmdline" &>/dev/null

		[ $? -eq 0 ] && {
			$LOGS "4G MODEM - another process in action: exiting"
			exit 0
		} || {
			[ "$PRIORITY" -eq 0 ] && return
			# process not found assume not running
			echo $PID > $PIDFILE
			[ $? -ne 0 ] && {
				$LOGS "4G MODEM - could not create PID file"
				exit 0
			}
		}
	} || {
		[ "$PRIORITY" -eq 0 ] && return
		echo $PID > $PIDFILE
		[ $? -ne 0 ] && {
			$LOGS "4G MODEM - could not create PID file"
			exit 0
		}
	}
}

wayOut() {
	local TEXT="$1"
	[ -z "$TEXT" ] && TEXT="4G Modem - exiting"

	$LOGS "$TEXT"
	rm -f $READYFILE &>/dev/null
	rm -f $PIDFILE &>/dev/null
	exit 0
}


###################################################


if [ "$2" == "connect" ]; then
	checkPid 1
	connect
elif [ "$2" == "disconnect" ]; then
	checkPid 0
	disconnect
elif [ "$2" == "reset" ]; then
	checkPid 0
	modemReset
elif [ "$2" == "signal" ]; then
	wwansignal $PREFIX
	exit
else
	checkPid 1

	# modem not yet detected
	[ ! -f $READYFILE ] && {
		switchMode
		searchWAN

		# only for non-hilink
		[ "$MTYPE" == "non-hilink" -o "$MTYPE" == "huawei-non-hilink" -o "$MTYPE" == "hw-ether" -o "$MTYPE" == "qmi_wwan" ] && {
			searchDiag
			setPIN
		}
	}

	connect
fi

rm -f $PIDFILE &>/dev/null
